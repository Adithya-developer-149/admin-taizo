{"version":3,"file":"static/js/158.8effa87c.chunk.js","mappings":"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","sources":["pages/Candidate/Candidate interview schedule list/interviewFilter.js","pages/Candidate/CandidateInterview/interviewReschedule..js","webpack://admin-login-react/./src/pages/Candidate/interviewCard/interviewCard.module.scss?49e5","assets/images/avatar-profile-picture.svg","assets/images/taizoin-logo-watermark.svg","pages/Candidate/interviewCard/interviewCard.js","pages/Candidate/Candidate interview schedule list/CandidateInterviewTable.js"],"sourcesContent":["/* eslint-disable no-duplicate-case */\r\n/* eslint-disable no-fallthrough */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Stack,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Autocomplete,\r\n  Menu,\r\n} from \"@mui/material\";\r\n\r\nimport \"dayjs/locale/en-gb\";\r\n\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { MyModal, dateFormate, numbersOnlyTest } from \"../../../utility\";\r\nimport { GetAllsdminDetails, getJobFilterOptions } from \"../../../apiServices\";\r\nimport { interviewListActions } from \"../../../redux-store/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import styled from \"styled-components\";\r\nimport { AiOutlineClose, AiOutlinePhone } from \"react-icons/ai\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport interviewStyle from \"./candidateInterviewSchedule.module.scss\";\r\n\r\n// const RedDot = styled.span`\r\n//   display: inline-block;\r\n//   width: 10px;\r\n//   height: 10px;\r\n//   background-color: red;\r\n//   border-radius: 50%; /* Makes it a circle */\r\n// `;\r\n\r\nexport default function ScheduleInterviewFilter() {\r\n  const interviewFilter = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const interviewFilterRedDot = useSelector(\r\n    (state) => state.interviewListDetails.refreshRedDot\r\n  );\r\n  const adminDetailsRole = useSelector((state) => state.adminDetails);\r\n  let isSuperAdmin = adminDetailsRole.roleID == 1;\r\n  const adminIDTwo = localStorage.getItem(\"adminID\") === \"2\";\r\n  const initialValues = {\r\n    adminId: localStorage.getItem(\"adminID\"),\r\n    jobId: interviewFilter.jobId,\r\n    contactNumber: interviewFilter.contactNumber,\r\n    candidateMobileNumber: interviewFilter.candidateMobileNumber,\r\n    companyName: interviewFilter.companyName,\r\n    jobCategory: interviewFilter.jobCategory,\r\n    city: interviewFilter.city,\r\n    area: interviewFilter.area,\r\n    interviewStatus: interviewFilter.interviewStatus,\r\n    scheduledBy: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n  };\r\n\r\n  const filterDetails = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const create = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.createdTime\r\n  );\r\n  const ended = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.endDate\r\n  );\r\n  const interviewDate = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.interviewDate\r\n  );\r\n  const interviewEndDate = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.interviewEndDate\r\n  );\r\n\r\n  const [formData, setFormData] = useState(initialValues);\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [dateRange, setDateRange] = useState({\r\n    start: filterDetails.createdTime,\r\n    end: filterDetails.endDate,\r\n    dateFilterType: filterDetails.dateFilterType,\r\n  });\r\n  const [dateRange1, setDateRange1] = useState({\r\n    start: filterDetails.interviewDate,\r\n    end: filterDetails.interviewEndDate,\r\n  });\r\n  const [showCustom, setshowCustom] = useState(false);\r\n  const [showCustom1, setshowCustom1] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n\r\n  const [adminDetails, setAdminDetails] = useState({\r\n    id: null,\r\n    adminName: [],\r\n  });\r\n  const handleTextFieldClick = () => {\r\n    setshowCustom1(true);\r\n  };\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n\r\n  const Dispatch = useDispatch();\r\n\r\n  const [errors, setErrors] = useState({\r\n    jobId: \"\",\r\n    candidateMobileNumber: \"\",\r\n    contactNumber: \"\",\r\n    companyName: \"\",\r\n    interviewDate: \"\",\r\n    jobCategory: \"\",\r\n    city: [],\r\n    area: [],\r\n    interviewStatus: \"\",\r\n    scheduledBy: \"\",\r\n  });\r\n\r\n  const [options, setOptions] = useState({\r\n    area: [],\r\n    city: [],\r\n    jobCategory: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  const jobCategory = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.jobCategory\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.size\r\n  );\r\n  const page = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.page\r\n  );\r\n\r\n  const [adminList, setAdminList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      const cityOptions = data.filter((element) => element.category === \"city\");\r\n      const areaOptions = data.filter(\r\n        (element) => element.category === \"areas\"\r\n      );\r\n      const JobCategoryOptions = data.filter(\r\n        (element) => element.category == \"job category\"\r\n      );\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        city: cityOptions,\r\n        area: areaOptions,\r\n        jobCategory: JobCategoryOptions,\r\n      }));\r\n      console.log(cityOptions);\r\n    });\r\n\r\n    GetAllsdminDetails()\r\n      .then((data) => {\r\n        const activeAdmins = data.filter((item) => !item.Deactived);\r\n        setAdminList(activeAdmins);\r\n      })\r\n      .catch(() => {\r\n        alert(\"Something Went wrong\");\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminName = data.map((item) => item.userName);\r\n      const adminid = data.map((item) => item.id);\r\n      console.log(adminName);\r\n      console.log(adminid);\r\n      setAdminDetails((prev) => ({\r\n        ...prev,\r\n        adminName: adminName,\r\n        id: adminid,\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  function handleAssignToChange(e) {\r\n    const { value } = e.target;\r\n    setFormData((prev) => ({ ...prev, scheduledBy: value }));\r\n  }\r\n\r\n  function handleFieldChange(field, value) {\r\n    // const value = event.target.value;\r\n    console.log(value, \"Interview time\");\r\n    console.log(numbersOnlyTest(value));\r\n    // eslint-disable-next-line default-case\r\n    switch (field) {\r\n      case \"jobId\":\r\n        if (numbersOnlyTest(value)) {\r\n          // setFormData((prev) => ({ ...prev, [field]: value }));\r\n          setFormData({ ...formData, [field]: value });\r\n\r\n          setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        } else {\r\n          setErrors((prev) => ({\r\n            ...prev,\r\n            jobId: \"Please enter valid job Id\",\r\n          }));\r\n        }\r\n        break;\r\n      case \"companyName\":\r\n        // setFormData((prev) => ({ ...prev, [field]: value }));\r\n\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n        break;\r\n      // case \"jobCategory\":\r\n      //   // setFormData((prev) => ({ ...prev, [field]: value }));\r\n      //   setFormData({ ...formData, [field]: value });\r\n      //   setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n      //   break;\r\n      case \"interviewStatus\":\r\n        // setFormData((prev) => ({ ...prev, [field]: value }));\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n\r\n        break;\r\n      case \"contactNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          if (value.length <= 10) {\r\n            // setFormData((prev) => ({ ...prev, [field]: value }));\r\n            setFormData({ ...formData, [field]: value });\r\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n          } else {\r\n            setErrors((prev) => ({\r\n              ...prev,\r\n              contactNumber: \"Contact number must be exactly 10 digits long\",\r\n            }));\r\n          }\r\n        }\r\n      case \"candidateMobileNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          if (value.length <= 10) {\r\n            // setFormData((prev) => ({ ...prev, [field]: value }));\r\n            setFormData({ ...formData, [field]: value });\r\n            setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n          } else {\r\n            setErrors((prev) => ({\r\n              ...prev,\r\n              candidateMobileNumber:\r\n                \"candidate MobileNumber number must be exactly 10 digits long\",\r\n            }));\r\n          }\r\n        } else {\r\n          setErrors((prev) => ({\r\n            ...prev,\r\n            contactNumber: \"Please enter a valid number\",\r\n          }));\r\n        }\r\n        break;\r\n      case \"interviewStatus\":\r\n        // setFormData((prev) => ({\r\n        //   ...prev,\r\n        //   [field]: dateFormate(value.$d).trim(),\r\n        // }));\r\n        setFormData({ ...formData, [field]: value });\r\n        setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        break;\r\n\r\n      case \"interviewDate\":\r\n        if (!value) {\r\n          setErrors((prev) => ({ ...prev, [field]: \"Date is required\" }));\r\n        } else {\r\n          setErrors((prev) => ({ ...prev, [field]: \"\" }));\r\n        }\r\n\r\n        setFormData({ ...formData, [field]: dateFormate(value.$d).trim() });\r\n        break;\r\n    }\r\n  }\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    console.log(val);\r\n\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date(today);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 6) % 7;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 7);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 6);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setAnchorEl(null);\r\n      console.log(startDate, endDate);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const today = new Date();\r\n      const todayDayOfWeek = today.getDay();\r\n\r\n      const daysToLastMonday = (todayDayOfWeek + 13) % 14;\r\n      const lastMonday = new Date(today);\r\n      lastMonday.setDate(today.getDate() - daysToLastMonday - 14);\r\n\r\n      const startDate = new Date(lastMonday);\r\n      const endDate = new Date(lastMonday);\r\n      endDate.setDate(lastMonday.getDate() + 13);\r\n      console.log(startDate, endDate);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const today = new Date(); // Assuming today is the current date\r\n\r\n      const startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n\r\n      const endDate = new Date(today.getFullYear(), today.getMonth(), 0);\r\n\r\n      console.log(startDate, endDate);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"yesterday\") {\r\n      const today = new Date(); // Assuming today is the current date\r\n\r\n      // Calculate yesterday's date\r\n      const yesterday = new Date(today);\r\n      yesterday.setDate(today.getDate() - 1);\r\n\r\n      // Set the start time to 12:00 AM\r\n      const startDate = new Date(yesterday);\r\n      startDate.setHours(0, 0, 0, 0);\r\n\r\n      // Set the end time to 11:59 PM\r\n      const endDate = new Date(yesterday);\r\n      endDate.setHours(23, 59, 59, 999);\r\n\r\n      console.log(startDate, endDate);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Yesterday\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  function handleInterviewCustomDate(value, type) {\r\n    // setSelectedDates({\r\n    //   ...selectedDates,\r\n    //   [type]: value.target.value,\r\n    // });\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange1((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid =\r\n      (dateRange.start && dateRange.end) ||\r\n      (dateRange1.start && dateRange1.end);\r\n\r\n    if (!dateRange.start || !dateRange1.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end || !dateRange1.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleApply = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n      console.log(\"Form submitted:\", dateRange);\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n      setshowCustom1(false);\r\n    }\r\n  };\r\n  const handleInterviewStatus = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(e);\r\n    console.log(value, name);\r\n    if (name === \"interviewStatus\") {\r\n      // setFormData({ ...formData, interviewStatus: value });\r\n      setFormData((prev) => ({ ...prev, interviewStatus: value }));\r\n    }\r\n  };\r\n  const updateArea = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, area: event });\r\n    // setFormData({ ...formData, city: value.options });\r\n  };\r\n  const updateCity = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, city: event.options });\r\n    // setFormData({ ...formData, city: value.options });\r\n  };\r\n\r\n  const updateJobCategory = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, jobCategory: event.options });\r\n  };\r\n  const updateJScheduleby = (event, value) => {\r\n    // to update cities\r\n\r\n    setFormData({ ...formData, scheduledBy: event });\r\n  };\r\n\r\n  const InterviewStatus = [\r\n    {\r\n      value: \"0\",\r\n      label: \"None\",\r\n    },\r\n    {\r\n      value: \"1\",\r\n      label: \"Attending\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"Not Attended\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      label: \"Awaiting\",\r\n    },\r\n\r\n    {\r\n      value: \"3\",\r\n      label: \"Selected\",\r\n    },\r\n\r\n    {\r\n      value: \"4\",\r\n      label: \"Not Selected\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      label: \"Will Join\",\r\n    },\r\n    {\r\n      value: \"5\",\r\n      label: \"Offer Rejected\",\r\n    },\r\n    // {\r\n    //   value: \"6\",\r\n    //   label: \"Joined\",\r\n    // },\r\n\r\n    // {\r\n    //   value: \"8\",\r\n    //   label: \"Left Company\",\r\n    // },\r\n    ...(isSuperAdmin || adminIDTwo\r\n      ? [\r\n          {\r\n            value: \"7\",\r\n            label: \"Rescheduled\",\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...formData,\r\n        page: 1,\r\n        size: size,\r\n        createdTime: dateRange.start || create,\r\n        endDate: dateRange.end || ended,\r\n        interviewDate: dateRange1.start || interviewDate,\r\n        interviewEndDate: dateRange1.end || interviewEndDate,\r\n        dateFilterType: dateRange.dateFilterType || \"\",\r\n      })\r\n    );\r\n\r\n    // Check if any filter is applied\r\n    const isFilterApplied =\r\n      interviewFilter.jobId ||\r\n      interviewFilter.interviewDate ||\r\n      interviewFilter.companyName ||\r\n      interviewFilter.contactNumber ||\r\n      interviewFilter.candidateMobileNumber ||\r\n      interviewFilter.jobCategory ||\r\n      interviewFilter.city ||\r\n      interviewFilter.area ||\r\n      interviewFilter.interviewStatus;\r\n\r\n    Dispatch(interviewListActions.setInterviewFilterRedDot(isFilterApplied));\r\n\r\n    setShowFilter(false);\r\n    // console.log(showFilter, \"jhjhsjhdfh\");\r\n  };\r\n\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    setFormData({\r\n      adminId: localStorage.getItem(\"adminID\"),\r\n      jobId: \"\",\r\n      jobCategory: \"\",\r\n      companyName: \"\",\r\n      candidateMobileNumber: \"\",\r\n      interviewStatus: -1,\r\n      scheduledBy: isSuperAdmin ? 0 : localStorage.getItem(\"adminID\"),\r\n      city: \"\",\r\n      area: \"\",\r\n    });\r\n    setDateRange1({\r\n      start: \"\",\r\n      end: \"\",\r\n    });\r\n    setDateRange({\r\n      start: null,\r\n      end: null,\r\n      dateFilterType: \"\",\r\n    });\r\n    setShowRedDot(false);\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...initialValues,\r\n        createdTime: \"\",\r\n        endDate: \"\",\r\n        interviewDate: \"\",\r\n        interviewEndDate: \"\",\r\n        page: 1,\r\n        size: size,\r\n        dateFilterType: \"\",\r\n      })\r\n    );\r\n  }\r\n\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      interviewListActions.setInterviewFilter({\r\n        ...formData,\r\n        page: 1,\r\n        size: size,\r\n        createdTime: create,\r\n        endDate: ended,\r\n        interviewDate: interviewDate,\r\n        interviewEndDate: interviewEndDate,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n    // setShowRedDot(false);\r\n    setShowFilter(false);\r\n  }\r\n  const jobCategoryStrings = options.jobCategory.map(\r\n    (option) => option.options\r\n  );\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${interviewStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />{\" \"}\r\n          <p\r\n            style={{\r\n              backgroundColor: interviewFilterRedDot ? \"red\" : \"transparent\",\r\n              width: \"10px\",\r\n              height: \"10px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>{\" \"}\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <div className={`${interviewStyle.BoxContainerWidth}`}>\r\n                <>\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <h4 className=\"text-center mb-2\">Filter by admin</h4>\r\n                    <h3>\r\n                      <span\r\n                        onClick={handleClickCross}\r\n                        className=\"btn btn-outline-danger\"\r\n                        style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                      >\r\n                        <AiOutlineClose />\r\n                      </span>\r\n                    </h3>\r\n                  </div>\r\n\r\n                  <form\r\n                    onSubmit={(e) => {\r\n                      handleSubmit(e);\r\n                    }}\r\n                  >\r\n                    <Stack className=\"mt-1\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Mobile number\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={formData.candidateMobileNumber}\r\n                            // inputProps={{ maxLenth: 10 }}\r\n                            onChange={(event) =>\r\n                              // event.target.value.length <= 10 &&\r\n                              handleFieldChange(\r\n                                \"candidateMobileNumber\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <span\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <AiOutlinePhone\r\n                                    style={{ marginRight: \"5px\" }}\r\n                                  />{\" \"}\r\n                                  +91\r\n                                </span>\r\n                              ),\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <FormControl fullWidth>\r\n                            <TextField\r\n                              id=\"outlined-basic\"\r\n                              label=\"Interview Date\"\r\n                              variant=\"outlined\"\r\n                              value={`${dateRange1.start} - ${dateRange1.end}`}\r\n                              onClick={handleTextFieldClick}\r\n                            />\r\n                            {showCustom1 && (\r\n                              <MyModal>\r\n                                <ModalContainer\r\n                                  zIndex={1005}\r\n                                  childComponent={\r\n                                    <div\r\n                                      style={{\r\n                                        minWidth: \"400px\",\r\n                                        width: \"auto\",\r\n                                      }}\r\n                                    >\r\n                                      <>\r\n                                        <div>\r\n                                          <form>\r\n                                            <p className=\"text-center \">\r\n                                              Select Custom Date{\" \"}\r\n                                            </p>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"start\">\r\n                                                From\r\n                                              </label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.start\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"start\"\r\n                                                value={dateRange1.start}\r\n                                                onChange={(value) =>\r\n                                                  handleInterviewCustomDate(\r\n                                                    value,\r\n                                                    \"startDate\"\r\n                                                  )\r\n                                                }\r\n                                                // Value={\r\n                                                //   new Date()\r\n                                                //     .toISOString()\r\n                                                //     .split(\"T\")[0]\r\n                                                // }\r\n                                                name=\"trip-start\"\r\n                                                // min=\"2020-01-01\"\r\n                                                // max={\r\n                                                //   new Date()\r\n                                                //     .toISOString()\r\n                                                //     .split(\"T\")[0]\r\n                                                // }\r\n                                              />\r\n                                              {validationErrors.start && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  Start date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"end\">To</label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.end\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"end\"\r\n                                                value={dateRange1.end}\r\n                                                // new Date().toISOString().split(\"T\")[0]\r\n                                                onChange={(value) =>\r\n                                                  handleInterviewCustomDate(\r\n                                                    value,\r\n                                                    \"endDate\"\r\n                                                  )\r\n                                                }\r\n                                                // Value={\r\n                                                //   new Date()\r\n                                                //     .toISOString()\r\n                                                //     .split(\"T\")[0]\r\n                                                // }\r\n                                                name=\"trip-end\"\r\n                                                // min=\"2020-01-01\"\r\n                                                // max={\r\n                                                //   new Date()\r\n                                                //     .toISOString()\r\n                                                //     .split(\"T\")[0]\r\n                                                // }\r\n                                              />\r\n                                              {validationErrors.end && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  End date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-end mt-3 \">\r\n                                              <button\r\n                                                onClick={() => {\r\n                                                  setValidationErrors({\r\n                                                    start: false,\r\n                                                    end: false,\r\n                                                  });\r\n                                                  setshowCustom1(false);\r\n                                                }}\r\n                                                style={{\r\n                                                  backgroundColor: \"#b2261c\",\r\n                                                }}\r\n                                                className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                              >\r\n                                                Close\r\n                                              </button>\r\n                                              <button\r\n                                                onClick={handleApply}\r\n                                                // color=\"primary\"\r\n                                                className=\"btn rounded-pill text-white px-4\"\r\n                                                style={{\r\n                                                  backgroundColor: \"#169C50\",\r\n                                                }}\r\n                                              >\r\n                                                Apply\r\n                                              </button>\r\n                                            </div>\r\n                                          </form>\r\n                                        </div>\r\n                                      </>\r\n                                    </div>\r\n                                  }\r\n                                />\r\n                              </MyModal>\r\n                            )}\r\n                          </FormControl>{\" \"}\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.jobCategory.map(\r\n                              (option) => option\r\n                            )}\r\n                            fullWidth\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateJobCategory(value);\r\n                            //   console.log(value, \"value jobs\");\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateJobCategory(\"\");\r\n                              } else {\r\n                                updateJobCategory(value);\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.jobCategory\r\n                                ? formData.jobCategory\r\n                                : \"\",\r\n                              category: \"job category\",\r\n                            }}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Job category\"\r\n                                placeholder=\"Job category\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        {/* created on */}\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <FormControl variant=\"outlined\" fullWidth>\r\n                            <TextField\r\n                              label=\"Created on\"\r\n                              id=\"basic-button\"\r\n                              value={`${dateRange.dateFilterType}`}\r\n                              // value={`${dateRange.start} - ${dateRange.end}`}\r\n                              aria-controls={open ? \"basic-menu\" : undefined}\r\n                              aria-haspopup=\"true\"\r\n                              aria-expanded={open ? \"true\" : undefined}\r\n                              onClick={handleClick}\r\n                            ></TextField>\r\n                            <Menu\r\n                              id=\"basic-menu\"\r\n                              anchorEl={anchorEl}\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                              }}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"today\");\r\n                                }}\r\n                                style={{ width: \"210px\" }}\r\n                              >\r\n                                Today\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"yesterday\");\r\n                                }}\r\n                              >\r\n                                Yesterday\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastWeek\");\r\n                                }}\r\n                              >\r\n                                Last 1 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastTwoWeeks\");\r\n                                }}\r\n                              >\r\n                                Last 2 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastMonth\");\r\n                                }}\r\n                              >\r\n                                Last Month\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"custom\");\r\n                                }}\r\n                              >\r\n                                Custom Date\r\n                              </MenuItem>\r\n                            </Menu>\r\n                          </FormControl>\r\n                          {/*  */}\r\n                          {showCustom && (\r\n                            <MyModal>\r\n                              <ModalContainer\r\n                                zIndex={1005}\r\n                                childComponent={\r\n                                  <div\r\n                                    style={{\r\n                                      minWidth: \"400px\",\r\n                                      width: \"auto\",\r\n                                    }}\r\n                                  >\r\n                                    <>\r\n                                      <div>\r\n                                        <form>\r\n                                          <p className=\"text-center \">\r\n                                            Select Custom Date{\" \"}\r\n                                          </p>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"start\">From</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.start\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"start\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"startDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-start\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.start && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                Start date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"end\">To</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.end\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"end\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"endDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-end\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.end && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                End date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"d-flex justify-content-end mt-3 \">\r\n                                            <button\r\n                                              onClick={() => {\r\n                                                setValidationErrors({\r\n                                                  start: false,\r\n                                                  end: false,\r\n                                                });\r\n                                                setshowCustom(false);\r\n                                              }}\r\n                                              style={{\r\n                                                backgroundColor: \"#b2261c\",\r\n                                              }}\r\n                                              className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                            >\r\n                                              Close\r\n                                            </button>\r\n                                            <button\r\n                                              onClick={handleApply}\r\n                                              // color=\"primary\"\r\n                                              className=\"btn rounded-pill text-white px-4\"\r\n                                              style={{\r\n                                                backgroundColor: \"#169C50\",\r\n                                              }}\r\n                                            >\r\n                                              Apply\r\n                                            </button>\r\n                                          </div>\r\n                                        </form>\r\n                                      </div>\r\n                                    </>\r\n                                  </div>\r\n                                }\r\n                              />\r\n                            </MyModal>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row  mb-3\">\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Company name\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={formData.companyName}\r\n                            onChange={(event) =>\r\n                              handleFieldChange(\r\n                                \"companyName\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                          />\r\n\r\n                          {/* <FormControl fullWidth>\r\n                            <InputLabel id=\"city-label\">City</InputLabel>\r\n                            <Select\r\n                              labelId=\"city-label\"\r\n                              sx={{ width: \"100%\" }}\r\n                              label=\"City\"\r\n                              name=\"city\"\r\n                              onChange={updateCity}\r\n                              value={formData.city}\r\n                            >\r\n                              {options.city.map((option, i) => (\r\n                                <MenuItem key={i} value={option.options}>\r\n                                  {option.options}\r\n                                </MenuItem>\r\n                              ))}\r\n                              <MenuItem value=\"\"></MenuItem>\r\n                            </Select>\r\n                          </FormControl> */}\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.city.map((option) => option)}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateCity(value);\r\n                            //   // console.log(value);\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateCity(\"\");\r\n                              } else {\r\n                                updateCity(value);\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.city ? formData.city : \"\",\r\n                              category: \"city\",\r\n                            }}\r\n                            fullWidth\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"City\"\r\n                                placeholder=\"City\"\r\n                              />\r\n                            )}\r\n                          />\r\n\r\n                          {/* <FormControl fullWidth>\r\n                            <InputLabel id=\"city-label\">Area</InputLabel>\r\n                            <Select\r\n                              labelId=\"city-label\"\r\n                              sx={{ width: \"100%\" }}\r\n                              label=\"Area\"\r\n                              name=\"area\"\r\n                              onChange={updateArea}\r\n                              value={formData.area}\r\n                            >\r\n                              {options.area.map((option, i) => (\r\n                                <MenuItem key={i} value={option.options}>\r\n                                  {option.options}\r\n                                </MenuItem>\r\n                              ))}\r\n                              <MenuItem value=\"\"></MenuItem>\r\n                            </Select>\r\n                          </FormControl> */}\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          {\" \"}\r\n                          <TextField\r\n                            id=\"interviewStatus\"\r\n                            name=\"interviewStatus\"\r\n                            label=\"Status\"\r\n                            // className=\"mt-2\"\r\n                            select\r\n                            value={formData.interviewStatus}\r\n                            fullWidth\r\n                            onChange={(event) =>\r\n                              handleFieldChange(\r\n                                \"interviewStatus\",\r\n                                event.target.value\r\n                              )\r\n                            }\r\n                          >\r\n                            {InterviewStatus.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                        <div className=\"col-sm-3 mt-3\">\r\n                          <Autocomplete\r\n                            id=\"tags-outlined\"\r\n                            options={options.area.map((option) => option)}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            // onChange={(event, value) => {\r\n                            //   updateArea(value ? value.options : \"\");\r\n                            //   // console.log(event, \"love\");\r\n                            //   console.log(value.options, \"ghghghggg\");\r\n                            // }}\r\n                            onChange={(event, value, reason) => {\r\n                              if (reason === \"clear\") {\r\n                                console.log(\"Selection cleared\");\r\n                                updateArea(\"\");\r\n                              } else {\r\n                                updateArea(value ? value.options : \"\");\r\n                                console.log(value, \"value jobs\");\r\n                              }\r\n                            }}\r\n                            value={{\r\n                              options: formData.area ? formData.area : \"\",\r\n                              category: \"areas\",\r\n                            }}\r\n                            fullWidth\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Area\"\r\n                                placeholder=\"Area\"\r\n                                value={formData.area}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-sm-3 \">\r\n                        {adminList && isSuperAdmin && (\r\n                          <TextField\r\n                            onChange={(e) => handleAssignToChange(e)}\r\n                            name=\"AssignedTo\"\r\n                            id=\"AssignedTo\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Assigned To\"\r\n                            value={formData.scheduledBy}\r\n                            defaultValue={formData.scheduledBy}\r\n                          >\r\n                            <MenuItem value={0}>ALL</MenuItem>\r\n                            {adminList.map((el) => (\r\n                              <MenuItem key={el.id} value={el.id}>\r\n                                {el.userName}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"d-flex flex-row gap-2 justify-content-end mt-2\">\r\n                        <button\r\n                          className={`rounded-pill ${interviewStyle.Filterbutton}`}\r\n                          variant=\"outlined\"\r\n                          onClick={(e) => {\r\n                            handleClear(e);\r\n                          }}\r\n                        >\r\n                          Clear All\r\n                        </button>\r\n                        <button\r\n                          className={`rounded-pill ${interviewStyle.search}`}\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          sx={{ minWidth: \"150px\" }}\r\n                        >\r\n                          Search\r\n                          {/* {!formData.loading && !formData.completed && \"Search\"}\r\n\r\n                          {\r\n                            formData.loading && (\r\n                              <div className=\"spinner-border spinner-border-sm text-light\"></div>\r\n                            ) // Add spinner here\r\n                          }\r\n                          {formData.completed && \"Submitted\"} */}\r\n                        </button>\r\n                      </div>\r\n                    </Stack>\r\n                  </form>\r\n                </>\r\n              </div>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable default-case */\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { MyModal, dateFormate, numbersOnlyTest } from \"../../../utility\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { useState } from \"react\";\r\n\r\nimport dayjs from \"dayjs\";\r\n\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { PostRescheduleInterviews } from \"../../../apiServices\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\n\r\nconst InterviewReschedule = ({ interviewId, onSuccess, onClose }) => {\r\n  const [rescheduleDetails, setRescheduleDetails] = useState({\r\n    // showPopup: true,\r\n    reScheduledOn: \"\",\r\n    interviewId: interviewId,\r\n    notes: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    interviewId: \"\",\r\n    reScheduledOn: \"\",\r\n  });\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n\r\n  const showCandidateId = interviewId != null;\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!rescheduleDetails.interviewId) {\r\n      newErrors.interviewId = \"Candidate ID is required\";\r\n    }\r\n\r\n    if (!rescheduleDetails.reScheduledOn) {\r\n      newErrors.reScheduledOn = \"Date is required\";\r\n    }\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, []);\r\n  function handleFieldChange(field, value) {\r\n    console.log(numbersOnlyTest(value));\r\n    switch (field) {\r\n      case \"interviewId\":\r\n        if (numbersOnlyTest(value)) {\r\n          setRescheduleDetails((prev) => ({ ...prev, [field]: value }));\r\n        }\r\n        break;\r\n      case \"reScheduledOn\":\r\n        setRescheduleDetails((prev) => ({ ...prev, [field]: value }));\r\n        setRescheduleDetails((prev) => ({\r\n          ...prev,\r\n          [field]: dateFormate(value.$d).trim(),\r\n        }));\r\n        setErrors((prev) => ({ ...prev, reScheduledOn: \"\" }));\r\n        break;\r\n    }\r\n  }\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, [rescheduleDetails]);\r\n  // useEffect(() => {\r\n  //   showPopup(true);\r\n  // }, [rescheduleDetails]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // showPopup(true);\r\n    if (validateForm()) {\r\n      console.log(\"Form submitted:\", rescheduleDetails);\r\n      // setRescheduleDetails((prev) => ({ ...prev, loading: true }));\r\n      PostRescheduleInterviews(rescheduleDetails)\r\n        .then(() => {\r\n          setShowSuccess(true);\r\n          setTimeout(() => {\r\n            setShowSuccess(false);\r\n            // showPopup(false);\r\n            setRescheduleDetails({\r\n              // showPopup: false,\r\n              reScheduledOn: \"\",\r\n              interviewId: interviewId,\r\n              // notes: notes,\r\n              notes: \"\",\r\n            });\r\n          }, [1000]);\r\n\r\n          onSuccess();\r\n          onClose();\r\n          // showPopup(false);\r\n        })\r\n\r\n        .catch(() => {\r\n          alert(\"Something went wrong, Please try again later.\");\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        {/* <div className=\"\">\r\n          <span\r\n            // // // className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              showPopup(true);\r\n            }}\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Reschedule\r\n          </span>\r\n        </div> */}\r\n        <div>\r\n          {rescheduleDetails && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                // zIndex={1001}\r\n                childComponent={\r\n                  <>\r\n                    <div className=\"d-flex flex-row   \">\r\n                      <h4 className=\"text-center\">Interview Reschedule</h4>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit}>\r\n                      {!showCandidateId && (\r\n                        <TextField\r\n                          id=\"interviewId\"\r\n                          label=\"Interview ID\"\r\n                          name=\"interviewId\"\r\n                          value={rescheduleDetails.interviewId}\r\n                          onChange={(event) =>\r\n                            handleFieldChange(\"interviewId\", event.target.value)\r\n                          }\r\n                          error={Boolean(errors.interviewId)}\r\n                          helperText={errors.interviewId}\r\n                          fullWidth\r\n                          required\r\n                          inputProps={{ maxLength: 10 }}\r\n                        />\r\n                      )}\r\n                      <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <DatePicker\r\n                          label=\"Date\"\r\n                          value={rescheduleDetails.reScheduledOn}\r\n                          name=\"reScheduledOn\"\r\n                          onChange={(value) =>\r\n                            handleFieldChange(\"reScheduledOn\", value)\r\n                          }\r\n                          minDate={dayjs(new Date())}\r\n                          fullWidth\r\n                          required\r\n                          slotProps={{\r\n                            textField: {\r\n                              helperText: errors.date,\r\n                              error: Boolean(errors.date),\r\n                            },\r\n                          }}\r\n                        />\r\n                      </LocalizationProvider>\r\n\r\n                      <div style={{ marginTop: \"16px\" }}>\r\n                        <TextField\r\n                          id=\"outlined-multiline-flexible\"\r\n                          label=\"Add Notes\"\r\n                          multiline\r\n                          // error={isNotesEmpty}\r\n                          // helperText={isNotesEmpty ? \"Notes cannot be empty\" : \"\"}\r\n                          // required\r\n                          onChange={(event) => {\r\n                            setRescheduleDetails((prev) => ({\r\n                              ...prev,\r\n                              notes: event.target.value,\r\n                            }));\r\n                            // setIsNotesEmpty(false);\r\n                          }}\r\n                          maxRows={4}\r\n                          fullWidth\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"mt-3 d-flex justify-content-end gap-2 flex-wrap align-items-center \">\r\n                        <Button\r\n                          onClick={() => {\r\n                            onClose();\r\n                          }}\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          size=\"small\"\r\n                        >\r\n                          Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\" size=\"small\">\r\n                          Reschedule\r\n                        </Button>\r\n                      </div>\r\n                    </form>\r\n                  </>\r\n                }\r\n              />\r\n            </MyModal>\r\n          )}\r\n\r\n          {showSuccess && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                childComponent={<SuccessTick HeadText=\"Successfully\" />}\r\n              />\r\n            </MyModal>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InterviewReschedule;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"passBackgroundWithCard1\":\"interviewCard_passBackgroundWithCard1__pFPgI\",\"interviewCard\":\"interviewCard_interviewCard__fcLHY\",\"avatarProfilePictureIcon\":\"interviewCard_avatarProfilePictureIcon__ibrUq\",\"fullName\":\"interviewCard_fullName__R9nhe\",\"johnDoe\":\"interviewCard_johnDoe__DpT+S\",\"spacer\":\"interviewCard_spacer__8ZA87\",\"framesStack\":\"interviewCard_framesStack__H2BPq\",\"position\":\"interviewCard_position__jXPJ-\",\"cncMachineOperator\":\"interviewCard_cncMachineOperator__kGH74\",\"div\":\"interviewCard_div__50CF-\",\"framesStack1\":\"interviewCard_framesStack1__UBrP2\",\"toMeet\":\"interviewCard_toMeet__+ifBp\",\"div1\":\"interviewCard_div1__X9Tbm\",\"michaelJordan\":\"interviewCard_michaelJordan__-d+zI\",\"framesStack2\":\"interviewCard_framesStack2__0SVa5\",\"taizoinLogoWatermarkIcon\":\"interviewCard_taizoinLogoWatermarkIcon__TMMdt\",\"reason\":\"interviewCard_reason__PEVp5\",\"div2\":\"interviewCard_div2__XeK76\",\"interview\":\"interviewCard_interview__En0LK\",\"framesStack3\":\"interviewCard_framesStack3__bmLR+\",\"date\":\"interviewCard_date__EAFme\",\"div3\":\"interviewCard_div3__ziXPK\",\"div4\":\"interviewCard_div4__Ih6dN\",\"framesStack4\":\"interviewCard_framesStack4__PR3Tz\",\"time\":\"interviewCard_time__jR13Z\",\"am\":\"interviewCard_am__wNH-j\",\"div5\":\"interviewCard_div5__uI-+0\",\"framesStack5\":\"interviewCard_framesStack5__Cpiyg\",\"cardDetails\":\"interviewCard_cardDetails__WLy4z\",\"cardDetails1\":\"interviewCard_cardDetails1__Lh3vR\",\"cardDetailWrp\":\"interviewCard_cardDetailWrp__9YpVl\",\"fontPoppins\":\"interviewCard_fontPoppins__b8PHH\",\"note1\":\"interviewCard_note1__jgEbt\",\"thisDigitalInterview\":\"interviewCard_thisDigitalInterview__JVIAP\",\"cardDetailsDiv\":\"interviewCard_cardDetailsDiv__sXRlA\",\"note\":\"interviewCard_note__FIwbT\",\"nterviewCardpass\":\"interviewCard_nterviewCardpass__sHOe7\",\"taizoinInterviewCardpassB\":\"interviewCard_taizoinInterviewCardpassB__uH31n\",\"sendWhatsapp\":\"interviewCard_sendWhatsapp__qqqL3\",\"sendWhatsappButton\":\"interviewCard_sendWhatsappButton__v7TaP\",\"taizoinCandidateInterviewC\":\"interviewCard_taizoinCandidateInterviewC__KGqiM\"};","var _rect, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgAvatarProfilePicture(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 110,\n    height: 111,\n    viewBox: \"0 0 110 111\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 110,\n    height: 110,\n    rx: 55,\n    fill: \"#D3D3D3\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M89.9679 88.4649C87.9632 81.4006 82.5218 75.8638 75.4575 73.859L62.4746 70.136H46.1504L33.1675 73.859C26.1032 75.8638 20.6618 81.4006 18.6571 88.4649L15.8125 93.5C25.9316 103.237 39.0862 110.135 54.2648 110.135C69.4434 110.135 83.2855 104.121 93.5 94.3836L89.9679 88.4649Z\",\n    fill: \"#BFBFBF\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.9018 59.7305H46.6278L44.2412 72.3316C44.2412 72.3316 48.537 76.8184 54.2648 77.1048C59.9926 76.9138 64.2884 72.3316 64.2884 72.3316L61.9018 59.7305Z\",\n    fill: \"#BFBFBF\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.3527 42.0699C71.3527 52.3799 63.7157 66.222 54.2649 66.222C44.8141 66.222 37.177 52.3799 37.177 42.0699C37.177 31.7599 44.8141 23.3592 54.2649 23.3592C63.7157 23.2637 71.3527 31.6645 71.3527 42.0699Z\",\n    fill: \"#BFBFBF\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.3725 43.5018C39.277 45.5066 38.1315 48.1795 36.6995 48.0841C35.363 47.9886 34.4084 45.3156 34.4084 43.2154C34.5039 41.2107 35.6494 39.5879 36.9859 39.6833C38.4178 39.7788 39.4679 41.4971 39.3725 43.5018Z\",\n    fill: \"#BFBFBF\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M73.8348 43.3109C73.9302 45.3157 72.8801 48.0841 71.5437 48.0841C70.2072 48.0841 68.9662 45.5066 68.9662 43.4064C68.8707 41.4017 69.9208 39.6833 71.2573 39.6833C72.5938 39.6833 73.7393 41.3062 73.8348 43.3109Z\",\n    fill: \"#BFBFBF\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.5202 29.4688C61.7111 30.0416 62.1884 30.5189 62.7612 30.8053C63.334 31.0917 63.9067 31.2826 64.4795 31.569C65.2432 31.8554 65.9115 32.1418 66.5797 32.6191C67.1525 33.0964 67.6298 33.7647 67.8207 34.5284\",\n    fill: \"#BFBFBF\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.0907 24.0274C38.1314 30.7098 50.0643 30.328 53.4055 29.9461C54.2646 29.8507 55.1238 29.5643 55.983 29.7552C56.9376 29.9461 57.7967 30.4235 58.7514 30.5189C60.8516 30.8053 63.0472 30.7098 65.0519 30.0416C65.5292 29.8507 66.0066 29.7552 66.4839 29.9461C66.7703 30.0416 66.9612 30.328 67.0566 30.5189C67.8204 31.6645 68.5841 32.9055 68.9659 34.1465C69.4432 36.0558 69.2523 38.0605 69.1568 39.9697C69.0614 41.2108 68.9659 45.5066 70.5888 45.793C70.8752 43.7883 71.0664 41.6881 71.2573 39.6833C71.2573 39.6833 72.9753 33.5737 72.4026 30.328C71.4479 25.2685 67.8203 19.0634 53.31 19.2543C43.0955 19.3498 41.0907 24.0274 41.0907 24.0274Z\",\n    fill: \"#BFBFBF\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.2913 27.5596C45.2913 27.7505 45.1958 27.8459 45.0049 28.0369C44.623 28.4187 44.1457 28.5142 43.6684 28.7051C42.2365 29.2779 41.2818 30.7098 40.5181 32.0463C40.0408 32.9055 39.468 33.8601 39.3726 34.8147C39.2771 36.1512 40.0408 37.3922 40.2317 38.7287C40.4227 39.7788 40.1363 40.7334 39.8499 41.7835C39.7544 42.2608 38.7043 46.2703 37.8452 45.8884L37.1769 39.7788C37.1769 39.7788 35.4586 33.6692 36.0314 30.4234C36.6042 27.2732 38.1316 23.5501 42.0455 24.6002C42.8092 24.6957 45.4822 26.414 45.2913 27.5596Z\",\n    fill: \"#BFBFBF\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAvatarProfilePicture);\nexport default __webpack_public_path__ + \"static/media/avatar-profile-picture.15011a5a623b887e9ff1bb6f35c2ea4d.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTaizoinLogoWatermark(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 295,\n    height: 280,\n    viewBox: \"0 0 295 280\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.05\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.6865 222.053C-1.52919 212.837 -1.61485 197.981 7.49519 188.871L57.6851 138.681C66.7952 129.571 81.6511 129.657 90.8668 138.872L141.64 189.645C150.855 198.861 150.941 213.717 141.831 222.827L91.6409 273.017C82.5309 282.127 67.6749 282.041 58.4592 272.825L7.6865 222.053Z\",\n    fill: \"#169C50\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M105.03 189.862L89.9999 174.832C91.7775 172.076 91.6516 168.489 89.6845 165.82C87.7173 163.152 84.3188 161.96 81.148 162.826C77.9768 163.693 75.6951 166.436 75.4162 169.718L54.9165 175.1C54.7377 174.882 54.552 174.673 54.3493 174.47C51.2335 171.354 46.2108 171.325 43.1306 174.406C40.0508 177.485 40.0795 182.508 43.1953 185.624C43.4351 185.862 43.6909 186.084 43.9602 186.288L38.6286 206.596C35.3413 206.834 32.5684 209.084 31.6648 212.245C30.7615 215.407 31.9165 218.821 34.5651 220.818C37.2139 222.814 40.8031 222.976 43.5782 221.225L58.6373 236.284C56.8884 239.053 57.0439 242.634 59.0284 245.284C61.0131 247.933 64.4138 249.1 67.5748 248.216C70.7353 247.332 72.9991 244.581 73.2631 241.303L94.0481 235.847L93.9741 235.582C97.1153 237.588 100.292 238.51 102.73 238.129L103.755 239.155L104.887 238.024L104.435 237.572C104.832 237.366 105.195 237.102 105.512 236.787C105.966 236.327 106.317 235.777 106.545 235.171L107.144 235.77L108.277 234.636L106.928 233.286C106.891 230.465 106.008 227.71 104.393 225.378L109.886 204.458C113.207 204.286 116.044 202.057 116.988 198.876C117.932 195.696 116.783 192.242 114.111 190.227C111.439 188.213 107.812 188.068 105.03 189.862ZM80.016 167.228C81.8401 165.402 84.8159 165.418 86.6626 167.263C88.5094 169.109 88.5274 172.085 86.703 173.91C84.8787 175.735 81.903 175.719 80.0566 173.873C78.2111 172.028 78.193 169.053 80.016 167.228ZM56.4644 178.216L75.8779 173.117C76.581 175.065 78.0185 176.667 79.8802 177.578L76.5057 190.788C72.3071 189.891 67.9482 190.899 64.6071 193.542L55.4585 184.393C56.6269 182.57 56.9898 180.338 56.4621 178.22L56.4644 178.216ZM45.4678 176.794C47.2919 174.968 50.2678 174.984 52.1147 176.829C53.9611 178.675 53.9791 181.651 52.1547 183.476C50.3307 185.302 47.3549 185.285 45.5084 183.439C43.6652 181.596 43.6453 178.624 45.4651 176.798L45.4678 176.794ZM47.0936 187.768C49.1439 188.238 51.2874 187.877 53.0543 186.765L62.2276 195.938C59.591 199.31 58.6098 203.699 59.551 207.909L46.4991 211.266C45.6262 209.331 44.0113 207.823 42.0226 207.085L47.0936 187.768ZM36.0328 217.896C34.1849 216.051 34.1659 213.074 35.9908 211.247C37.8152 209.421 40.7923 209.437 42.6392 211.283C44.4867 213.131 44.5036 216.108 42.6776 217.933C40.8541 219.759 37.8792 219.744 36.031 217.9L36.0328 217.896ZM68.7428 243.996C66.9183 245.823 63.9414 245.807 62.0944 243.96C60.2475 242.114 60.2312 239.136 62.0577 237.312C63.884 235.488 66.8611 235.507 68.7057 237.356C70.5496 239.203 70.5653 242.177 68.7412 244.001L68.7428 243.996ZM61.01 233.879L45.9814 218.851C46.7979 217.586 47.2312 216.109 47.2289 214.595L60.6818 211.132C62.4198 214.733 65.5715 217.463 69.3792 218.667L65.8037 232.656C64.1091 232.541 62.4282 232.971 61.008 233.884L61.01 233.879ZM101.773 221.946C101.496 221.64 101.214 221.339 100.916 221.041C96.0635 216.189 90.1469 214 86.641 215.477L78.0552 206.892C79.0339 204.801 78.3586 202.293 76.4556 200.947C74.5522 199.601 71.9725 199.809 70.3428 201.439C68.7131 203.068 68.5055 205.648 69.8511 207.552C71.1965 209.455 73.7051 210.13 75.7955 209.151L84.3119 217.668C82.6231 221.138 84.8011 227.221 89.7669 232.187C90.1095 232.53 90.4601 232.856 90.8098 233.172L72.7946 237.9C72.3966 236.806 71.7633 235.81 70.9391 234.985C70.3865 234.433 69.757 233.965 69.0713 233.594L72.7207 219.317C76.0097 219.566 79.2719 218.684 81.9661 216.817L79.5699 214.42C74.8066 217.359 68.5594 216.263 65.0006 211.865C61.4418 207.467 61.6866 201.145 65.5713 197.12C69.4557 193.096 75.7637 192.631 80.2815 196.035C84.7994 199.44 86.1116 205.648 83.3422 210.512L85.7683 212.938C87.4757 210.327 88.2795 207.22 88.0576 204.088L102.491 200.375C103.388 201.976 104.81 203.223 106.514 203.902L101.773 221.946ZM101.486 197.117L87.4255 200.734C86.2188 196.844 83.4231 193.629 79.734 191.89L83.1819 178.4C84.7472 178.447 86.2857 178.03 87.6028 177.199L102.662 192.258C101.749 193.702 101.336 195.409 101.483 197.121L101.486 197.117ZM112.767 199.978C110.943 201.804 107.967 201.788 106.12 199.943C104.273 198.097 104.255 195.121 106.08 193.295C107.905 191.47 110.882 191.488 112.728 193.334C114.57 195.18 114.589 198.153 112.767 199.978Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M137.954 117.838L115.56 140.231L122.513 147.184L129.925 139.772L150.943 160.79L158.512 153.221L137.494 132.203L144.906 124.791L137.954 117.838Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M161.364 107.215L162.3 109.634C159.105 109.872 156.043 111.257 153.546 113.754C147.109 120.191 147.26 129.549 153.933 136.222C160.646 142.935 170.045 143.127 176.482 136.69C178.94 134.232 180.325 131.248 180.603 128.093L182.746 128.987L188.364 123.369L166.786 101.792L161.364 107.215ZM170.904 129.161C168.173 131.892 164.066 131.764 161.229 128.927C158.432 126.13 158.343 122.063 161.074 119.332C163.805 116.601 167.873 116.689 170.67 119.486C173.507 122.323 173.635 126.43 170.904 129.161Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.728 94.4963L175.906 87.318L169.593 81.0046L162.414 88.183L168.728 94.4963ZM192.943 118.79L200.199 111.534L178.622 89.9561L171.366 97.2126L192.943 118.79Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M206.821 91.7254L201.034 70.0212L199.796 68.7825L182.396 86.1823L188.989 92.7754L196.363 85.4019L202.192 107.383L203.271 108.462L221.451 90.2819L214.858 83.6888L206.821 91.7254Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.857 77.3149C242.723 70.4486 242.843 60.6591 236.17 53.9861C229.497 47.3131 219.747 47.4727 212.881 54.339C206.014 61.2053 205.894 70.9159 212.567 77.5889C219.24 84.2619 228.99 84.1812 235.857 77.3149ZM229.184 70.6419C226.57 73.2558 222.7 73.2095 219.863 70.3724C216.986 67.4954 216.94 63.6259 219.554 61.012C222.207 58.3591 226.116 58.4454 228.953 61.2824C231.79 64.1195 231.836 67.989 229.184 70.6419Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M250.046 61.6867L257.108 54.6253L250.235 47.7525L243.174 54.8139L250.046 61.6867Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.191 26.0333L244.369 18.855L238.056 12.5416L230.877 19.72L237.191 26.0333ZM261.406 50.3269L268.662 43.0705L247.085 21.4931L239.829 28.7495L261.406 50.3269Z\",\n    fill: \"#393939\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.758 3.62144C261.027 6.35234 259.725 9.73201 259.963 13.0906L256.75 11.8283L251.639 16.939L273.217 38.5164L280.473 31.26L268.965 19.752C266.208 16.9949 265.897 14.1092 268.16 11.8464C269.993 10.0128 272.168 10.3152 274.686 12.8326L286.793 24.9399L294.05 17.6835L280.903 4.53727C275.429 -0.936982 268.635 -1.25517 263.758 3.62144Z\",\n    fill: \"#393939\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTaizoinLogoWatermark);\nexport default __webpack_public_path__ + \"static/media/taizoin-logo-watermark.00f933adecec68da0e5f520be8d92b22.svg\";\nexport { ForwardRef as ReactComponent };","/* eslint-disable react/jsx-pascal-case */\r\nimport styles from \"./interviewCard.module.scss\";\r\nimport passBackgroundCard from \"../../../assets/images/pass-background-with-card-1@2x.png\";\r\nimport avatarProfilePic from \"../../../assets/images/avatar-profile-picture.svg\";\r\nimport taizoinLogoWatermarkIcon from \"../../../assets/images/taizoin-logo-watermark.svg\";\r\nimport html2canvas from \"html2canvas\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetInterviewDetails } from \"../../../apiServices\";\r\nimport { DMMMYYYY_formate } from \"../../../utility\";\r\n\r\nconst CandidateInterviewCard = ({ interviewId }) => {\r\n  const elementRef = useRef(null);\r\n  const [interviewDetails, setInterviewDetails] = useState({});\r\n\r\n  useEffect(() => {\r\n    GetInterviewDetails(interviewId).then((res) => {\r\n      setInterviewDetails({\r\n        candidateName: res.candidate.firstName,\r\n        companyName: res.job.companyName,\r\n        position: res.job.jobCategory,\r\n        contactPersonName: res.job.contactPersonName,\r\n        interviewScheduledDt: res.interview.interviewScheduledDt,\r\n      });\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const captureImage = async () => {\r\n    try {\r\n      const canvas = await html2canvas(elementRef.current, {\r\n        // Optional options (check library documentation)\r\n        backgroundColor: \"transparent\",\r\n      });\r\n\r\n      // Convert canvas to image data\r\n      const imageData = canvas.toDataURL(\"image/png\");\r\n\r\n      // Create a link and trigger a download\r\n      const link = document.createElement(\"a\");\r\n      link.href = imageData;\r\n      link.download = `${interviewDetails.candidateName}_InterviewCard.png`;\r\n      link.click();\r\n\r\n      // Optionally, you can close the new window after a certain period\r\n    } catch (error) {\r\n      console.error(\"Error capturing image:\", error);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={`${styles.taizoinCandidateInterviewC} ${styles.fontPoppins} `}\r\n    >\r\n      <div ref={elementRef} className={styles.taizoinInterviewCardpassB}>\r\n        <img\r\n          className={styles.passBackgroundWithCard1}\r\n          alt=\"\"\r\n          src={passBackgroundCard}\r\n        />\r\n        <div className={styles.nterviewCardpass}>\r\n          <div className={styles.cardDetailsDiv}>\r\n            <div className={styles.cardDetails}>\r\n              <h1 className={styles.interviewCard}>INTERVIEW CARD</h1>\r\n              <img\r\n                className={styles.avatarProfilePictureIcon}\r\n                loading=\"eager\"\r\n                alt=\"\"\r\n                src={avatarProfilePic}\r\n              />\r\n              <img\r\n                className={styles.taizoinLogoWatermarkIcon}\r\n                alt=\"\"\r\n                src={taizoinLogoWatermarkIcon}\r\n              />\r\n              <div className={styles.cardDetailWrp}>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Full name{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : {interviewDetails.candidateName}{\" \"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Company Name{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : {interviewDetails.companyName}{\" \"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Position{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : {interviewDetails.position}{\" \"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    To Meet{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : {interviewDetails.contactPersonName}{\" \"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Reason{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : Interview{\" \"}\r\n                  </div>\r\n                </div>\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Date{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    :{\" \"}\r\n                    <DMMMYYYY_formate\r\n                      dateValue={interviewDetails.interviewScheduledDt}\r\n                    />{\" \"}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row ps-3\">\r\n                  <div className={`${styles.fontPoppins} col-5 ps-4`}>\r\n                    Time{\" \"}\r\n                  </div>\r\n                  <div className={`${styles.fontPoppins} col-7`}>\r\n                    : 9:00 AM{\" \"}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.note}>\r\n              <div className={`${styles.note1} ${styles.fontPoppins}`}>\r\n                Note:\r\n              </div>\r\n              <div\r\n                className={`${styles.thisDigitalInterview} ${styles.fontPoppins}`}\r\n              >\r\n                This digital interview card is only for interview purpose and\r\n                valid only one day from the date of interview.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={captureImage} className={styles.sendWhatsappButton}>\r\n        <div className={styles.sendWhatsapp}>Download Card</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandidateInterviewCard;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  CircularProgress,\r\n  FormControl,\r\n  FormHelperText,\r\n} from \"@mui/material\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\n\r\nimport {\r\n  GetAllsdminDetails,\r\n  GetcanInterviews,\r\n  PutInterviewStatus,\r\n  getCandidateLead,\r\n  getcandidateDetails,\r\n  PostinterviewInactive,\r\n} from \"../../../apiServices\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  DMMMYYYY_formate,\r\n  MyModal,\r\n  capitalizeWords,\r\n  convertDateDDMMYYY,\r\n  convertDateYYYYMMDD,\r\n  textTruncate,\r\n} from \"../../../utility\";\r\nimport interviewStyle from \"./candidateInterviewSchedule.module.scss\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { Pagination, Stack, TextField, Tooltip } from \"@mui/material\";\r\nimport {\r\n  commonPopupActions,\r\n  interviewListActions,\r\n} from \"../../../redux-store/store\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport Nojoid from \"./Nojoid\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport ScheduleInterviewFilter from \"./interviewFilter\";\r\nimport InterviewReschedule from \"../CandidateInterview/interviewReschedule.\";\r\nimport { Box, isWidthDown } from \"@material-ui/core\";\r\nimport canLeadStyle from \"../CandidateLeadTable/candidateLead.module.scss\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CandidateInterviewCard from \"../interviewCard/interviewCard\";\r\n\r\n// import { Dropdown } from \"bootstrap\";\r\nconst StyledTableCell = styled(TableCell)(() => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#e2dedeed\",\r\n    color: \"#545454f0\",\r\n    maxWidth: \"350px\",\r\n    padding: \"8px\",\r\n    \"@media (max-width: 992px)\": {\r\n      // backgroundColor: \"red\",\r\n      // padding: \"5px 50px\",\r\n      // textAlign: \"left\",\r\n    },\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"8px\",\r\n    \"@media (max-width: 992px)\": {\r\n      // backgroundColor: \"red\",\r\n      // padding: \"5px 50px\",\r\n      // textAlign: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction RecentActivity({ data }) {\r\n  const date = {\r\n    rescheduledDateTime: data.rescheduledDateTime,\r\n    joinedOn: data.joinedOn,\r\n    selectedOn: data.selectedOn,\r\n    notSelectedOn: data.notSelectedOn,\r\n    offerRejectedOn: data.offerRejectedOn,\r\n    notAttendedOn: data.notAttendedOn,\r\n    attendedOn: data.attendedOn,\r\n    leftTheCompanyAt: data.leftTheCompanyAt,\r\n    awaitingOn: data.awaitingOn,\r\n    willJoiningOn: data.willJoiningOn,\r\n  };\r\n  if (date.rescheduledDateTime) {\r\n    date.rescheduledDateTime = date.rescheduledDateTime\r\n      .replace(\"T\", \" \")\r\n      .replace(\".000+0000\", \"\");\r\n  }\r\n  let mostRecentDate = null;\r\n  let mostRecentKey = null;\r\n\r\n  for (const key in date) {\r\n    const dateStr = date[key];\r\n    if (dateStr && dateStr.includes(\"-\")) {\r\n      const currentDate = new Date(dateStr);\r\n\r\n      if (!mostRecentDate || currentDate > mostRecentDate) {\r\n        mostRecentDate = currentDate;\r\n        mostRecentKey = key;\r\n        // console.log(mostRecentKey);\r\n        // console.log(mostRecentDate);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (mostRecentKey) {\r\n    if (mostRecentKey === \"selectedOn\") {\r\n      return <div className={`${interviewStyle.Selected}`}>Selected</div>;\r\n    } else if (mostRecentKey === \"notSelectedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.Notselected}`}>Not Selected</div>\r\n      );\r\n    } else if (mostRecentKey === \"notAttendedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.NotAttended}`}>Not Attended</div>\r\n      );\r\n    } else if (mostRecentKey === \"offerRejectedOn\") {\r\n      return (\r\n        <div className={`${interviewStyle.rejected_label}`}>Offer Rejected</div>\r\n      );\r\n    } else if (mostRecentKey === \"joinedOn\") {\r\n      return <div className={`${interviewStyle.joined}`}>Joined</div>;\r\n    } else if (mostRecentKey === \"rescheduledDateTime\") {\r\n      return (\r\n        <div className={`${interviewStyle.rescheduledChips}`}>Rescheduled</div>\r\n      );\r\n    } else if (mostRecentKey === \"attendedOn\") {\r\n      return <div className={`${interviewStyle.Attended}`}>Attending</div>;\r\n    } else if (mostRecentKey === \"leftTheCompanyAt\") {\r\n      return (\r\n        <div className={`${interviewStyle.leftCompany}`}>Left company</div>\r\n      );\r\n    } else if (mostRecentKey === \"willJoiningOn\") {\r\n      return <div className={`${interviewStyle.willJoining}`}>Will Join</div>;\r\n    } else if (mostRecentKey === \"awaitingOn\") {\r\n      return <div className={`${interviewStyle.Awaitingchips}`}>Awaiting</div>;\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nexport default function CandidateInterviewTable({ width }) {\r\n  const isSmallScreen = isWidthDown(\"md\", width);\r\n  const [isRescheduleOpen, setIsRescheduleOpen] = useState(false);\r\n  const [showLoader, setShowLoader] = useState(false); // New state for loader\r\n  const [CandidateInterviewList, setCandidateInterviewList] = React.useState(\r\n    []\r\n  );\r\n  // const [isDateSelected, setIsDateSelected] = useState(false);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [showConfirmPopup, setShowConfirmPopup] = useState(false);\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [currentInterviewId, setCurrentInterviewId] = useState(\"\");\r\n\r\n  const [interviewCard, setInterviewCard] = useState({\r\n    show: false,\r\n    id: \"\",\r\n  });\r\n\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [candidatename, setcandidate] = useState(false);\r\n  const [contactPersonName, setContactPersonName] = useState(\"\");\r\n  const [contactID, setcontactID] = useState(\"\");\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [showSuccessinactive, setshowSuccessinactive] = useState(false);\r\n  const [pageCount, setPageCount] = useState({\r\n    totalPages: 0,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n  });\r\n  const interviewFilter = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.interviewListDetails.interviewFilter.size\r\n  );\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n  const adminIDTwo = localStorage.getItem(\"adminID\") === \"2\";\r\n  const [open, setOpen] = useState(false);\r\n  const [isNotesEmpty, setIsNotesEmpty] = useState(false);\r\n  const handleClick = (id) => {\r\n    setCurrentInterviewId(id);\r\n  };\r\n  const [isDateSelected, setIsDateSelected] = useState(false);\r\n  const [interviewStatus, setInterviewStatus] = useState({\r\n    caninterviewid: \"\",\r\n    statusfield: \"\",\r\n    date: \"\",\r\n    willJoining: \"\",\r\n    notes: \"\",\r\n  });\r\n  const inputRef = {\r\n    attended: useRef(),\r\n    notAttended: useRef(),\r\n    selected: useRef(),\r\n    notSelected: useRef(),\r\n    offerRejected: useRef(),\r\n    joined: useRef(),\r\n    leftCompany: useRef(),\r\n    rescheduled: useRef(),\r\n    isAwaiting: useRef(),\r\n  };\r\n  const handleButtonClick = (refName) => {\r\n    const ref = inputRef[refName];\r\n    if (ref.current) {\r\n      ref.current.click();\r\n    }\r\n  };\r\n\r\n  const handleInactiveopen = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  function handleCloseNotes() {\r\n    setShowConfirmPopup(false);\r\n    setIsNotesEmpty(false);\r\n    setIsDateSelected(false);\r\n    setInterviewStatus({\r\n      caninterviewid: \"\",\r\n      statusfield: \"\",\r\n      date: \"\",\r\n      willJoining: \"\",\r\n      notes: \"\",\r\n    });\r\n  }\r\n\r\n  function handleConfirmationOpen() {\r\n    setShowConfirmPopup(true);\r\n  }\r\n\r\n  const handleOkButtonClick = async () => {\r\n    try {\r\n      setshowSuccessinactive(true);\r\n      const data = await PostinterviewInactive(currentInterviewId);\r\n\r\n      console.log(\"API Response:\", data);\r\n\r\n      setTimeout(() => {\r\n        setshowSuccessinactive(false);\r\n        setModalOpen(false);\r\n      }, 1500);\r\n      GetcanInterviews(interviewFilter).then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      });\r\n    } catch (error) {\r\n      console.error(\"API Error:\", error);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    setCandidateInterviewList({\r\n      jobId: 0,\r\n      contactNumber: null,\r\n      candidateMobileNumber: 0,\r\n      companyName: null,\r\n      interviewDate: null,\r\n      jobCategory: null,\r\n      area: null,\r\n      city: null,\r\n      interviewCurrentStatus: -1,\r\n      scheduledBy: null,\r\n      endDate: null,\r\n      createdTime: null,\r\n      page: 1,\r\n      size: 10,\r\n    });\r\n\r\n    // Fetch data after resetting\r\n    GetcanInterviews(interviewFilter)\r\n      .then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n\r\n  const handleInterviewCard = () => {\r\n    setInterviewCard({\r\n      show: true,\r\n      id: currentInterviewId,\r\n    });\r\n  };\r\n\r\n  const handleRadioBtn = (candidateId, statusFieldName, event) => {\r\n    // let isChecked = event.target.checked;\r\n    console.log(candidateId, \"candidateId\");\r\n    if (!event || event) {\r\n      handleConfirmationOpen();\r\n      setInterviewStatus((prev) => ({\r\n        ...prev,\r\n        caninterviewid: currentInterviewId,\r\n        statusfield: statusFieldName,\r\n      }));\r\n\r\n      // Retrieve contactPersonName from CandidateInterviewList\r\n      const selectedCandidate = CandidateInterviewList.find(\r\n        (candidate) => candidate.CanInterviewsModel.id === currentInterviewId\r\n      );\r\n      if (selectedCandidate) {\r\n        setContactPersonName(selectedCandidate.CandidateModel.firstName);\r\n      }\r\n      if (selectedCandidate) {\r\n        setcontactID(selectedCandidate.CanInterviewsModel.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const ConfirmFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // if (interviewStatus.notes.trim() === \"\") {\r\n    //   setIsNotesEmpty(true);\r\n    //   return;\r\n    // }\r\n    if (interviewStatus.notes.trim() === \"\") {\r\n      setIsNotesEmpty(true);\r\n      return;\r\n    } else {\r\n      PutInterviewStatus(\r\n        interviewStatus.caninterviewid,\r\n        interviewStatus.statusfield,\r\n        interviewStatus.date,\r\n        interviewStatus.willJoining,\r\n        interviewStatus.notes\r\n      ).then(() => {\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n        }, 3000);\r\n        setInterviewStatus({\r\n          caninterviewid: \"\",\r\n          statusfield: \"\",\r\n          date: \"\",\r\n          willJoining: \"\",\r\n          notes: \"\",\r\n        });\r\n        GetcanInterviews(interviewFilter).then((data) => {\r\n          const InterviewList = data.canInterviewList.map((item) => item);\r\n          setCandidateInterviewList(InterviewList);\r\n          setPageCount((prev) => ({\r\n            ...prev,\r\n            totalPages: Math.ceil(data.totalCount / size),\r\n          }));\r\n          setOpen(false);\r\n        });\r\n      });\r\n    }\r\n  };\r\n  const ConfirmFormSubmitWithoutnotes = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      interviewStatus.statusfield === \"isJoined\" &&\r\n      interviewStatus.date === \"\"\r\n    ) {\r\n      setIsDateSelected(true);\r\n      return;\r\n    } else {\r\n      PutInterviewStatus(\r\n        interviewStatus.caninterviewid,\r\n        interviewStatus.statusfield,\r\n        interviewStatus.date,\r\n        interviewStatus.willJoining,\r\n        interviewStatus.notes\r\n      ).then(() => {\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n        }, 3000);\r\n        setInterviewStatus({\r\n          caninterviewid: \"\",\r\n          statusfield: \"\",\r\n          date: \"\",\r\n          willJoining: \"\",\r\n          notes: \"\",\r\n        });\r\n        GetcanInterviews(interviewFilter).then((data) => {\r\n          const InterviewList = data.canInterviewList.map((item) => item);\r\n          setCandidateInterviewList(InterviewList);\r\n          setPageCount((prev) => ({\r\n            ...prev,\r\n            totalPages: Math.ceil(data.totalCount / size),\r\n          }));\r\n          setOpen(false);\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // const ConfirmFormSubmitWithoutnotes = (e) => {\r\n  //   e.preventDefault();\r\n  //   // if (interviewStatus.notes.trim() === \"\") {\r\n  //   //   setIsNotesEmpty(true);\r\n  //   //   return;\r\n  //   // }\r\n  //   if (\r\n  //     interviewStatus.statusfield === \"isJoined\" &&\r\n  //     interviewStatus.date !== \"\"\r\n  //   ) {\r\n  //     setIsDateSelected(true);\r\n  //     return;\r\n  //   } else {\r\n  //     PutInterviewStatus(\r\n  //       interviewStatus.caninterviewid,\r\n  //       interviewStatus.statusfield,\r\n  //       interviewStatus.date,\r\n  //       interviewStatus.willJoining,\r\n  //       interviewStatus.notes\r\n  //     ).then(() => {\r\n  //       setShowSuccess(true);\r\n  //       setTimeout(() => {\r\n  //         setShowSuccess(false);\r\n  //         setShowConfirmPopup(false);\r\n  //       }, 3000);\r\n  //       setInterviewStatus({\r\n  //         caninterviewid: \"\",\r\n  //         statusfield: \"\",\r\n  //         date: \"\",\r\n  //         willJoining: \"\",\r\n  //         notes: \"\",\r\n  //       });\r\n  //       GetcanInterviews(interviewFilter).then((data) => {\r\n  //         const InterviewList = data.canInterviewList.map((item) => item);\r\n  //         setCandidateInterviewList(InterviewList);\r\n  //         setPageCount((prev) => ({\r\n  //           ...prev,\r\n  //           totalPages: Math.ceil(data.totalCount / size),\r\n  //         }));\r\n  //         setOpen(false);\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const handlePopupDetails = (id, type) => {\r\n    console.log(id);\r\n\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: type,\r\n        id: id,\r\n      })\r\n    );\r\n  };\r\n  const handleCandidateDetails = async (candidateId, type) => {\r\n    let data;\r\n    if (type === \"RegisterCandidate\") {\r\n      data = await getcandidateDetails(candidateId);\r\n    } else if (type === \"CandidateLead\") {\r\n      data = await getCandidateLead(candidateId);\r\n    }\r\n\r\n    // Dispatch action to show the popup and pass the fetched data\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: \"candidateDetails\",\r\n        id: candidateId,\r\n        type: type,\r\n        data: data,\r\n      })\r\n    );\r\n  };\r\n  function Getreschedule() {\r\n    GetcanInterviews(interviewFilter).then((data) => {\r\n      // eslint-disable-next-line no-use-before-define\r\n      console.log(InterviewList);\r\n      const InterviewList = data.canInterviewList.map((item) => item);\r\n      setCandidateInterviewList(InterviewList);\r\n      setPageCount((prev) => ({\r\n        ...prev,\r\n        // totalCount: totalElements,\r\n        totalPages: Math.ceil(data.totalCount / size),\r\n      }));\r\n    });\r\n  }\r\n\r\n  const Dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    // console.log(isSuperAdmin, \"--------------------------Super\");\r\n    if (isSuperAdmin) {\r\n      Dispatch(interviewListActions.setInterviewFilterShceduleBy(0));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [adminDetails]);\r\n\r\n  useEffect(() => {\r\n    setShowLoader(true); // Show loader before making the API call\r\n\r\n    console.log(\r\n      interviewFilter,\r\n      \"interviewFilter--------------------------------------\"\r\n    );\r\n\r\n    GetcanInterviews(interviewFilter)\r\n      .then((data) => {\r\n        const InterviewList = data.canInterviewList.map((item) => item);\r\n        setCandidateInterviewList(InterviewList);\r\n        setTotalCount(data.totalCount);\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(data.totalCount / size),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false); // Hide loader after the API call is complete\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [interviewFilter]);\r\n\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n\r\n    Dispatch(interviewListActions.setInterviewFilterPage(currentPage));\r\n  }\r\n\r\n  function candidateSize(size) {\r\n    Dispatch(interviewListActions.setInterviewFilterSize(size));\r\n    // updateData();\r\n    console.log(size);\r\n  }\r\n  function copyToClipboard(text) {\r\n    const textField = document.createElement(\"textarea\");\r\n    textField.innerText = text;\r\n    document.body.appendChild(textField);\r\n    textField.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(textField);\r\n    // const cell = document.activeElement;\r\n    // cell.title = \"Copied\";\r\n  }\r\n  const handleMenuClick = () => {\r\n    // event.preventDefault();\r\n    setIsRescheduleOpen(true);\r\n  };\r\n  const closeRescheduleModal = () => {\r\n    setIsRescheduleOpen(false);\r\n  };\r\n\r\n  const [adminName, setAdminName] = useState([]);\r\n  const [adminid, setAdminId] = useState([]);\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminNames = data.map((item) => item.userName);\r\n      const adminIds = data.map((item) => item.id);\r\n      setAdminName(adminNames);\r\n      setAdminId(adminIds);\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className={`${interviewStyle.FilterHead}`}>\r\n        {\" \"}\r\n        <div className=\"d-flex \">\r\n          Show {\"  \"}\r\n          <select\r\n            name=\"\"\r\n            id=\"\"\r\n            className=\"px-1 py-1 mx-2\"\r\n            onChange={(event) => candidateSize(event.target.value)}\r\n          >\r\n            <option selected value=\"10\">\r\n              10\r\n            </option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n          </select>\r\n          {\"   \"}\r\n          Entries\r\n        </div>\r\n        <div className={`${canLeadStyle.filterAdduser}`}>\r\n          <div className=\"mt-1 me-2 \">Total Count : {totalCount}</div>\r\n          <div\r\n            className=\"p-1 success me-2 mx-2 ms-auto\"\r\n            onClick={handleReset}\r\n            // style={{ : \"#169C50\", color: \"white\" }}\r\n          >\r\n            {/* {\r\n              <p\r\n                style={{\r\n                  backgroundColor: showRedDot ? \"red\" : \"transparent\",\r\n                  width: \"10px\",\r\n                  height: \"10px\",\r\n                  borderRadius: \"50%\",\r\n                }}\r\n              ></p>\r\n            } */}\r\n            <LuRefreshCcw />\r\n          </div>\r\n          <ScheduleInterviewFilter />\r\n        </div>\r\n      </div>\r\n\r\n      <>\r\n        <Backdrop\r\n          sx={{\r\n            color: \"#fff\",\r\n            zIndex: (theme) => theme.zIndex.drawer + 1,\r\n          }}\r\n          open={showLoader}\r\n          onClick={() => {}} // Prevent closing on backdrop click\r\n        >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n      </>\r\n\r\n      {/* <button onClick={togglePosition}>Toggle Position</button>\r\n\r\n      {isAbsolute ? (\r\n        <div className={`${interviewStyle.card} `}>\r\n          <div className={`${interviewStyle.absolute}`}>\r\n            <p>This is a card</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )} */}\r\n      {/* sx={{ maxHeight: \"70vh\", maxWidth: \"1000%\" }} */}\r\n      <div className={`${interviewStyle.Container}`}>\r\n        {/* <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}> */}\r\n        <div className={`table-responsive-sm ${interviewStyle.responsive}`}>\r\n          <TableContainer className={`${interviewStyle.TableContainer}`}>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"sticky table\"\r\n              size={isSmallScreen ? \"medium\" : \"small\"}\r\n              className={`${interviewStyle.TableDetails}`}\r\n              // style={{ width: \"1600px\", overflowX: \"auto\" }}\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell\r\n                  // className={`mt-1 ${interviewStyle.StyledTableCell}`}\r\n                  >\r\n                    Name\r\n                  </StyledTableCell>\r\n                  <StyledTableCell\r\n                    // className={` ${interviewStyle.StyledTableCell}`}\r\n                    style={{ width: \"auto\" }}\r\n                    align=\"left\"\r\n                  >\r\n                    Mobile&nbsp;Number\r\n                  </StyledTableCell>\r\n                  <StyledTableCell style={{ width: \"auto\" }} align=\"left\">\r\n                    Job&nbsp;Category\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    Company&nbsp;Name\r\n                  </StyledTableCell>\r\n                  {/* <StyledTableCell align=\"left\">Area</StyledTableCell> */}\r\n                  {/* <StyledTableCell align=\"left\">City</StyledTableCell> */}\r\n                  {isSuperAdmin && (\r\n                    <StyledTableCell align=\"left\">Scheduled by</StyledTableCell>\r\n                  )}\r\n                  {/* <StyledTableCell align=\"left\">Possible %</StyledTableCell> */}\r\n                  <StyledTableCell align=\"left\">\r\n                    Interview&nbsp;Date\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    Created&nbsp;On\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">Status</StyledTableCell>\r\n                  {/*\r\n                   */}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {CandidateInterviewList.length > 0 ? (\r\n                  <>\r\n                    {CandidateInterviewList.map((candidate, i) => (\r\n                      <TableRow\r\n                        sx={{\r\n                          \"&:last-child td, &:last-child th\": { border: 0 },\r\n                        }}\r\n                        key={i}\r\n                        onClick={() => {\r\n                          setInterviewStatus((prev) => ({\r\n                            ...prev,\r\n                            id: candidate.id,\r\n                          }));\r\n                          setcandidate(candidate);\r\n                        }}\r\n                      >\r\n                        <StyledTableCell\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={candidate.CandidateModel?.firstName || null}\r\n                          onClick={() => {\r\n                            handleCandidateDetails(\r\n                              candidate.CandidateModel.id,\r\n                              \"RegisterCandidate\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          {candidate.CandidateModel?.firstName\r\n                            ? textTruncate(\r\n                                capitalizeWords(\r\n                                  candidate.CandidateModel.firstName\r\n                                ),\r\n                                15\r\n                              ) +\r\n                              \" \" +\r\n                              textTruncate(\r\n                                capitalizeWords(\r\n                                  candidate.CandidateModel.lastName\r\n                                ),\r\n                                5\r\n                              )\r\n                            : \"-\"}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          onClick={() => {\r\n                            if (\r\n                              candidate.CandidateModel &&\r\n                              candidate.CandidateModel.mobileNumber\r\n                            ) {\r\n                              copyToClipboard(\r\n                                candidate.CandidateModel.mobileNumber\r\n                              );\r\n                            }\r\n                          }}\r\n                        >\r\n                          {candidate.CandidateModel &&\r\n                          candidate.CandidateModel.mobileNumber\r\n                            ? String(\r\n                                candidate.CandidateModel.mobileNumber\r\n                              ).slice(0, 10)\r\n                            : \"\"}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          align=\"left\"\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={\r\n                            candidate.JobModel.jobCategory &&\r\n                            candidate.JobModel.jobCategory.length > 20\r\n                              ? candidate.JobModel.jobCategory\r\n                              : null\r\n                          }\r\n                          onClick={() => {\r\n                            copyToClipboard(\r\n                              candidate.CandidateModel.jobCategory\r\n                            );\r\n                            handlePopupDetails(\r\n                              candidate.CanInterviewsModel.jobId,\r\n                              \"jobDetails\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          {candidate.JobModel.jobCategory &&\r\n                          candidate.JobModel.jobCategory.length > 20\r\n                            ? `${candidate.JobModel.jobCategory.slice(\r\n                                0,\r\n                                20\r\n                              )}...`\r\n                            : candidate.JobModel.jobCategory}\r\n                        </StyledTableCell>\r\n\r\n                        <StyledTableCell\r\n                          align=\"left\"\r\n                          sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                          title={\r\n                            candidate.CanInterviewsModel.companyName.length > 20\r\n                              ? candidate.CanInterviewsModel.companyName\r\n                              : null\r\n                          }\r\n                          onClick={() => {\r\n                            copyToClipboard(\r\n                              candidate.CanInterviewsModel.companyName\r\n                            );\r\n                            handlePopupDetails(\r\n                              candidate.EmployerModel.id,\r\n                              \"employerDetails\"\r\n                            );\r\n                            // Update the title attribute with \"Copied\"\r\n                            // cell.title = \"Copied\";\r\n                          }}\r\n                        >\r\n                          {candidate.CanInterviewsModel.companyName.length > 20\r\n                            ? `${candidate.CanInterviewsModel.companyName.slice(\r\n                                0,\r\n                                20\r\n                              )}...`\r\n                            : candidate.CanInterviewsModel.companyName}\r\n                        </StyledTableCell>\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.area}\r\n                        </StyledTableCell> */}\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.city}\r\n                        </StyledTableCell> */}\r\n                        {isSuperAdmin && (\r\n                          <StyledTableCell align=\"left\">\r\n                            <>\r\n                              {\r\n                                adminName[\r\n                                  adminid.indexOf(\r\n                                    candidate.CanInterviewsModel.adminId\r\n                                      .length > 15\r\n                                      ? `${candidate.CanInterviewsModel.adminId.slice(\r\n                                          0,\r\n                                          15\r\n                                        )}...`\r\n                                      : candidate.CanInterviewsModel.adminId\r\n                                  )\r\n                                ]\r\n                              }\r\n                            </>\r\n                          </StyledTableCell>\r\n                        )}\r\n\r\n                        {/* <StyledTableCell align=\"left\">\r\n                          {candidate.CanInterviewsModel.candidatePercentage}\r\n                        </StyledTableCell> */}\r\n                        <StyledTableCell align=\"left\">\r\n                          {\r\n                            // eslint-disable-next-line react/jsx-pascal-case\r\n                            <DMMMYYYY_formate\r\n                              dateValue={\r\n                                !candidate.CanInterviewsModel.rescheduled\r\n                                  ? candidate.CanInterviewsModel\r\n                                      .interviewScheduledDt\r\n                                  : candidate.CanInterviewsModel.rescheduledDate\r\n                              }\r\n                            />\r\n                          }\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"left\">\r\n                          {\r\n                            // eslint-disable-next-line react/jsx-pascal-case\r\n                            <DMMMYYYY_formate\r\n                              dateValue={\r\n                                candidate.CanInterviewsModel.createdTime\r\n                              }\r\n                            />\r\n                          }\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"left\">\r\n                          <div className={`${interviewStyle.Popper}`}>\r\n                            {interviewFilter.interviewStatus === -1 ? (\r\n                              <div>\r\n                                <RecentActivity\r\n                                  data={candidate.CanInterviewsModel}\r\n                                />\r\n                              </div>\r\n                            ) : (\r\n                              <>\r\n                                <div className={interviewStyle.chips_wrp}>\r\n                                  {interviewFilter.interviewStatus === \"1\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Attended_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .attended && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .attended\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .attended && isChecked ? (\r\n                                              <Tooltip title=\" candidate attended\">\r\n                                                <label\r\n                                                  htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Attending\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Attending\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"2\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.NotAttended_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .notAttended && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .notAttended\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .notAttended && isChecked ? (\r\n                                              <Tooltip title=\" candidate attended\">\r\n                                                <label\r\n                                                  htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`}\r\n                                                >\r\n                                                  Not Attended\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`}\r\n                                              >\r\n                                                Not Attended\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n\r\n                                  {interviewFilter.interviewStatus === \"3\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Selected_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .selected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .selected\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .selected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate selected\">\r\n                                                <label\r\n                                                  htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Selected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Selected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"10\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.willJoining_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .willJoining && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .willJoining\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .willJoining && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate will Joining\">\r\n                                                <label\r\n                                                  htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Will Join\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                willJoining\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"9\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.awaiting_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .awaiting && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .awaiting\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .awaiting && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate Awaiting\">\r\n                                                <label\r\n                                                  htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.Awaitingchips}`}\r\n                                                >\r\n                                                  Awaiting\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.Awaitingchips}`}\r\n                                              >\r\n                                                Awaiting\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"4\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.NotSelected_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .notSelected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .notSelected\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .notSelected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate selected\">\r\n                                                <label\r\n                                                  htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`}\r\n                                                >\r\n                                                  Not Selected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`}\r\n                                              >\r\n                                                Not Selected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"5\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.OfferRejected_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .offerRejected && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .offerRejected\r\n                                              }\r\n                                            />\r\n\r\n                                            {candidate.CanInterviewsModel\r\n                                              .offerRejected && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate Rejected\">\r\n                                                <label\r\n                                                  htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                  className={`${interviewStyle.rejected_label}`} // Add this class\r\n                                                >\r\n                                                  Offer Rejected\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                className={`${interviewStyle.rejected_label}`} // Add this class\r\n                                              >\r\n                                                Offer Rejected\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"7\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.rescheduledChips\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .rescheduled && (\r\n                                          <>\r\n                                            <label>Reschedule</label>\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"6\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={interviewStyle.Joined_wrp}\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .joined && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .joined\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .joined && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate joined\">\r\n                                                <label\r\n                                                  htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Joined\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Joined\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                  {interviewFilter.interviewStatus === \"8\" ? (\r\n                                    <>\r\n                                      <div\r\n                                        className={\r\n                                          interviewStyle.LeftCompany_wrp\r\n                                        }\r\n                                      >\r\n                                        {candidate.CanInterviewsModel\r\n                                          .leftTheCompany && (\r\n                                          <>\r\n                                            <input\r\n                                              type=\"checkbox\"\r\n                                              name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                              id={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                              checked={\r\n                                                candidate.CanInterviewsModel\r\n                                                  .leftTheCompany\r\n                                              }\r\n                                            />\r\n                                            {candidate.CanInterviewsModel\r\n                                              .leftTheCompany && isChecked ? (\r\n                                              <Tooltip title=\"Already candidate LeftCompany\">\r\n                                                <label\r\n                                                  htmlFor={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  Left Company\r\n                                                </label>\r\n                                              </Tooltip>\r\n                                            ) : (\r\n                                              <label\r\n                                                htmlFor={`leftCompany${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                Left Company\r\n                                              </label>\r\n                                            )}\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    </>\r\n                                  ) : null}\r\n                                </div>\r\n                              </>\r\n                            )}\r\n                            <div>\r\n                              <div className=\"btn-group dropstart\">\r\n                                <button\r\n                                  type=\"button\"\r\n                                  data-bs-toggle=\"dropdown\"\r\n                                  data-bs-no-caret=\"true\"\r\n                                  aria-expanded=\"false\"\r\n                                  onClick={(e) => {\r\n                                    handleClick(\r\n                                      candidate.CanInterviewsModel.id,\r\n                                      e\r\n                                    );\r\n                                  }}\r\n                                  style={{\r\n                                    border: \"none\",\r\n                                    background: \"none\",\r\n                                    color: \"#000\",\r\n                                    cursor: \"pointer\",\r\n                                    outline: \"none\",\r\n                                    position: \"relative\",\r\n                                    right: \"5px\",\r\n                                    // backgroundColor: \"red\",\r\n                                    fontSize: 20,\r\n                                  }}\r\n                                >\r\n                                  <BsThreeDotsVertical />\r\n                                  {/* <AiOutlineEdit /> */}\r\n                                </button>\r\n                                <ul\r\n                                  className=\"dropdown-menu\"\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  // ref={dropdownRef}\r\n                                >\r\n                                  {/* <!-- Dropdown menu links --> */}\r\n                                  {candidate.CanInterviewsModel.attended ===\r\n                                    false &&\r\n                                    candidate.CanInterviewsModel.notAttended ===\r\n                                      false && (\r\n                                      <>\r\n                                        <li\r\n                                          onClick={(event) =>\r\n                                            handleRadioBtn(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              \"isAttended\",\r\n                                              event.target.checked\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${interviewStyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                id={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                                name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                checked={\r\n                                                  candidate.CanInterviewsModel\r\n                                                    .attended\r\n                                                }\r\n                                              />\r\n\r\n                                              <label\r\n                                                htmlFor={`attended_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#FEF08A\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />{\" \"}\r\n                                                Attending\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                      </>\r\n                                    )}\r\n                                  {candidate.CanInterviewsModel.selected ===\r\n                                    false && (\r\n                                    // candidate.CanInterviewsModel.notAttended ===\r\n                                    //   false &&\r\n                                    <li\r\n                                      onClick={(event) =>\r\n                                        handleRadioBtn(\r\n                                          candidate.CanInterviewsModel.id,\r\n                                          \"isNotAttended\",\r\n                                          event.target.checked\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <a className=\"dropdown-item\" href=\"#\">\r\n                                        <div\r\n                                          className={`${interviewStyle.select_wrp}`}\r\n                                        >\r\n                                          <input\r\n                                            type=\"checkbox\"\r\n                                            // ref={inputRef.notAttended}\r\n                                            name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                            id={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                            checked={\r\n                                              candidate.CanInterviewsModel\r\n                                                .notAttended\r\n                                            }\r\n                                          />\r\n\r\n                                          <label\r\n                                            htmlFor={`notAttended_${candidate.CanInterviewsModel.id}`}\r\n                                          >\r\n                                            <GoDotFill\r\n                                              style={{\r\n                                                color: \"#FFA164\",\r\n                                                fontSize: 20,\r\n                                              }}\r\n                                            />{\" \"}\r\n                                            Not Attended\r\n                                          </label>\r\n                                        </div>\r\n                                      </a>\r\n                                    </li>\r\n                                  )}\r\n                                  {candidate.CanInterviewsModel.attended ===\r\n                                    true && (\r\n                                    <>\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .awaiting === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isAwaiting\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.selected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .awaiting\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`awaiting_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#8E44AD\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Awaiting\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isSelected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.selected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .selected\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`selected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#BBF7D0\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Selected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n\r\n                                      {candidate.CanInterviewsModel.selected ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .notSelected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isNotSelected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  // ref={inputRef.notSelected}\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .notSelected\r\n                                                  }\r\n                                                />\r\n                                                <label\r\n                                                  htmlFor={`notSelected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#FECACA\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Not Selected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                    </>\r\n                                  )}\r\n                                  {candidate.CanInterviewsModel.selected ===\r\n                                    true && (\r\n                                    <>\r\n                                      {candidate.CanInterviewsModel\r\n                                        .offerRejected === false && (\r\n                                        <li\r\n                                          onClick={(event) =>\r\n                                            handleRadioBtn(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              \"willJoining\",\r\n                                              event.target.checked\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${interviewStyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                // ref={inputRef.offerRejected}\r\n                                                type=\"checkbox\"\r\n                                                name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                id={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                                checked={\r\n                                                  candidate.CanInterviewsModel\r\n                                                    .willJoining\r\n                                                }\r\n                                              />\r\n\r\n                                              <label\r\n                                                htmlFor={`willJoining_${candidate.CanInterviewsModel.id}`}\r\n                                              >\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#7B7D7D\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />{\" \"}\r\n                                                Will Join\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                      )}\r\n                                      {/* {candidate.CanInterviewsModel\r\n                                        .willJoining === false && (\r\n                                        \r\n                                      )} */}\r\n                                      {candidate.CanInterviewsModel.joined ===\r\n                                        false &&\r\n                                        candidate.CanInterviewsModel\r\n                                          .offerRejected === false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isOfferRejected\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  // ref={inputRef.offerRejected}\r\n                                                  type=\"checkbox\"\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .offerRejected\r\n                                                  }\r\n                                                />\r\n\r\n                                                <label\r\n                                                  htmlFor={`offerRejected_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#636363\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Offer Rejected\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                      {candidate.CanInterviewsModel\r\n                                        .offerRejected === false &&\r\n                                        candidate.CanInterviewsModel.joined ===\r\n                                          false && (\r\n                                          <li\r\n                                            onClick={(event) =>\r\n                                              handleRadioBtn(\r\n                                                candidate.CanInterviewsModel.id,\r\n                                                \"isJoined\",\r\n                                                event.target.checked\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <a\r\n                                              className=\"dropdown-item\"\r\n                                              href=\"#\"\r\n                                            >\r\n                                              <div\r\n                                                className={`${interviewStyle.select_wrp}`}\r\n                                              >\r\n                                                <input\r\n                                                  // ref={inputRef.joined}\r\n                                                  type=\"checkbox\"\r\n                                                  name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                                  id={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                  checked={\r\n                                                    candidate.CanInterviewsModel\r\n                                                      .joined\r\n                                                  }\r\n                                                />\r\n\r\n                                                <label\r\n                                                  htmlFor={`joined_${candidate.CanInterviewsModel.id}`}\r\n                                                >\r\n                                                  <GoDotFill\r\n                                                    style={{\r\n                                                      color: \"#b7ff98\",\r\n                                                      fontSize: 20,\r\n                                                    }}\r\n                                                  />{\" \"}\r\n                                                  Joined\r\n                                                </label>\r\n                                              </div>\r\n                                            </a>\r\n                                          </li>\r\n                                        )}\r\n                                    </>\r\n                                  )}\r\n                                  {candidate.CanInterviewsModel.joined ===\r\n                                    true && (\r\n                                    <li\r\n                                      onClick={(event) =>\r\n                                        handleRadioBtn(\r\n                                          candidate.CanInterviewsModel.id,\r\n                                          \"isLeftCompany\",\r\n                                          event.target.checked\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <a className=\"dropdown-item\" href=\"#\">\r\n                                        <div\r\n                                          className={`${interviewStyle.select_wrp}`}\r\n                                        >\r\n                                          <input\r\n                                            // ref={inputRef.leftCompany}\r\n                                            type=\"checkbox\"\r\n                                            name={`statusfield_${candidate.CanInterviewsModel.id}`}\r\n                                            id={`leftCompany_${candidate.CanInterviewsModel.id}`}\r\n                                            checked={\r\n                                              candidate.CanInterviewsModel\r\n                                                .leftCompany\r\n                                            }\r\n                                            // onChange={(event) =>\r\n\r\n                                            // }\r\n                                          />\r\n\r\n                                          <label\r\n                                            htmlFor={`leftCompany_${candidate.CanInterviewsModel.id}`}\r\n                                          >\r\n                                            <GoDotFill\r\n                                              style={{\r\n                                                color: \"#fa9e0a\",\r\n                                                fontSize: 20,\r\n                                              }}\r\n                                            />{\" \"}\r\n                                            Left Company\r\n                                          </label>\r\n                                        </div>\r\n                                      </a>\r\n                                    </li>\r\n                                  )}\r\n                                  {(isSuperAdmin || adminIDTwo) && (\r\n                                    <li\r\n                                      onClick={() =>\r\n                                        handleButtonClick(\"rescheduled\")\r\n                                      }\r\n                                    >\r\n                                      <a className=\"dropdown-item\" href=\"#\">\r\n                                        <label\r\n                                          ref={inputRef.rescheduled}\r\n                                          onClick={(e) => {\r\n                                            handleMenuClick(\r\n                                              candidate.CanInterviewsModel.id,\r\n                                              e\r\n                                            );\r\n                                          }}\r\n                                        >\r\n                                          <GoDotFill\r\n                                            style={{\r\n                                              color: \"#55559f\",\r\n                                              fontSize: 20,\r\n                                            }}\r\n                                          />{\" \"}\r\n                                          Reschedule\r\n                                        </label>\r\n                                      </a>\r\n                                    </li>\r\n                                  )}\r\n\r\n                                  <li\r\n                                    className=\"\"\r\n                                    onClick={(e) => {\r\n                                      handleInterviewCard();\r\n                                    }}\r\n                                  >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                      <label>\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#55559f\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Interview Card\r\n                                      </label>\r\n                                    </a>\r\n                                  </li>\r\n                                  <li\r\n                                    className=\"\"\r\n                                    onClick={(e) => {\r\n                                      handleInactiveopen();\r\n                                    }}\r\n                                  >\r\n                                    <a className=\"dropdown-item\" href=\"#\">\r\n                                      <label>\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#F85244\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Inactive\r\n                                      </label>\r\n                                    </a>\r\n                                  </li>\r\n                                </ul>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </>\r\n                ) : (\r\n                  <div className=\"d-flex align-items-center justify-content-center\">\r\n                    {\" \"}\r\n                    <Nojoid />\r\n                  </div>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          {/* </Paper> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-center align-items-center mb-3 position-absolute bottom-0 start-50 translate-middle-x\">\r\n        <Stack spacing={2}>\r\n          <Pagination\r\n            count={pageCount.totalPages}\r\n            variant=\"outlined\"\r\n            shape=\"rounded\"\r\n            color=\"success\"\r\n            onChange={candidatePagination}\r\n          />\r\n        </Stack>\r\n      </div>\r\n      <div className=\"mt-2\"></div>\r\n      {showConfirmPopup && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <div\r\n                  style={{\r\n                    width: \"400px\",\r\n                  }}\r\n                >\r\n                  <Box\r\n                    component=\"form\"\r\n                    sx={{\r\n                      \"& .MuiTextField-root\": { m: 1, width: \"390px\" },\r\n                    }}\r\n                    noValidate\r\n                    autoComplete=\"off\"\r\n                  >\r\n                    <>\r\n                      <div>\r\n                        <div className=\"text-center mb-2\">Add Notes</div>\r\n                        <div>\r\n                          {!(\r\n                            interviewStatus.statusfield === \"isAttended\" ||\r\n                            interviewStatus.statusfield === \"isJoined\" ||\r\n                            interviewStatus.statusfield === \"isSelected\"\r\n                          ) ? (\r\n                            <>\r\n                              <TextField\r\n                                id=\"outlined-multiline-flexible\"\r\n                                label=\"Add Notes\"\r\n                                multiline\r\n                                style={{ width: \"100%\" }}\r\n                                error={isNotesEmpty}\r\n                                helperText={\r\n                                  isNotesEmpty ? \"Notes cannot be empty\" : \"\"\r\n                                }\r\n                                required\r\n                                onChange={(event) => {\r\n                                  setInterviewStatus((prev) => ({\r\n                                    ...prev,\r\n                                    notes: event.target.value,\r\n                                  }));\r\n                                  setIsNotesEmpty(false);\r\n                                }}\r\n                                maxRows={4}\r\n                                fullWidth\r\n                              />\r\n                              {interviewStatus.statusfield ===\r\n                                \"willJoining\" && (\r\n                                <FormControl fullWidth error={isNotesEmpty}>\r\n                                  <LocalizationProvider\r\n                                    dateAdapter={AdapterDayjs}\r\n                                  >\r\n                                    <DatePicker\r\n                                      label=\"Date\"\r\n                                      sx={{ width: \"100%\" }}\r\n                                      className=\"mt-4\"\r\n                                      onChange={(datefeild) => {\r\n                                        console.log(\r\n                                          \"ortiuoDate Field:\",\r\n                                          datefeild.$d\r\n                                        );\r\n                                        setInterviewStatus((prev) => ({\r\n                                          ...prev,\r\n                                          date: datefeild.$d,\r\n                                        }));\r\n                                        setIsNotesEmpty(false);\r\n                                      }}\r\n                                      fullWidth\r\n                                    />\r\n                                    {isNotesEmpty && (\r\n                                      <FormHelperText error>\r\n                                        Please select a date\r\n                                      </FormHelperText>\r\n                                    )}\r\n                                  </LocalizationProvider>\r\n                                </FormControl>\r\n                              )}\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-2\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Close\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={ConfirmFormSubmit}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <TextField\r\n                                id=\"outlined-multiline-flexible\"\r\n                                label=\"Add Notes\"\r\n                                multiline\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={(event) => {\r\n                                  setInterviewStatus((prev) => ({\r\n                                    ...prev,\r\n                                    notes: event.target.value,\r\n                                  }));\r\n                                  // setIsNotesEmpty(false);\r\n                                  // setShowConfirmPopup(false);\r\n                                }}\r\n                                maxRows={4}\r\n                                fullWidth\r\n                              />\r\n                              {(interviewStatus.statusfield === \"isJoined\" ||\r\n                                interviewStatus.statusfield ===\r\n                                  \"isSelected\") && (\r\n                                <>\r\n                                  <FormControl fullWidth error={isDateSelected}>\r\n                                    {/* error={isNotesEmpty} */}\r\n                                    <LocalizationProvider\r\n                                      dateAdapter={AdapterDayjs}\r\n                                    >\r\n                                      <DatePicker\r\n                                        label=\"Date\"\r\n                                        sx={{ width: \"100%\" }}\r\n                                        className=\"mt-4\"\r\n                                        // value={dayjs(interviewStatus.date)}\r\n\r\n                                        onChange={(datefeild) => {\r\n                                          console.log(\r\n                                            \"odksogdgoDate Field:\",\r\n                                            datefeild.$d\r\n                                          );\r\n                                          setInterviewStatus((prev) => ({\r\n                                            ...prev,\r\n                                            date: datefeild.$d,\r\n                                          }));\r\n                                          setIsDateSelected(false);\r\n                                          // console.log(\r\n                                          //   convertDateYYYYMMDD(datefeild.$d)\r\n                                          // );\r\n                                          // setIsNotesEmpty(false);\r\n                                        }}\r\n                                        // required={\r\n                                        //   interviewStatus.statusfield ===\r\n                                        //   \"isJoined\"\r\n                                        // }\r\n                                        fullWidth\r\n                                        // required\r\n                                      />\r\n                                      {/* {isNotesEmpty && (\r\n                                            <FormHelperText error>\r\n                                              Please select a date\r\n                                            </FormHelperText>\r\n                                          )} */}\r\n                                    </LocalizationProvider>\r\n                                  </FormControl>\r\n                                </>\r\n                              )}\r\n                              <div className=\"d-flex justify-content-end gap-1 mt-2\">\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={handleCloseNotes}\r\n                                  style={{ backgroundColor: \"#d00a0a\" }}\r\n                                >\r\n                                  Close\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn text-white\"\r\n                                  onClick={ConfirmFormSubmitWithoutnotes}\r\n                                  style={{ backgroundColor: \"#169C50\" }}\r\n                                >\r\n                                  Submit\r\n                                </button>\r\n                              </div>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  </Box>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {interviewCard.show && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <div className=\"d-flex flex-row justify-content-between \">\r\n                  <div>\r\n                    <h2>Download Interview Card </h2>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => {\r\n                        setInterviewCard((prev) => ({ ...prev, show: false }));\r\n                      }}\r\n                    >\r\n                      x\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                <div style={{ height: \"80vh\", overflowY: \"scroll\" }}>\r\n                  <div></div>\r\n                  <CandidateInterviewCard interviewId={currentInterviewId} />\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {modalOpen && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                <p>\r\n                  Are you sure you want to inactive{\" \"}\r\n                  <strong>\r\n                    {capitalizeWords(candidatename.CandidateModel.firstName)}{\" \"}\r\n                    {capitalizeWords(candidatename.CandidateModel.lastName)}\r\n                  </strong>\r\n                  ?\r\n                </p>\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={() => setModalOpen(false)}\r\n                    style={{\r\n                      borderColor: \"red\",\r\n                      color: \"red\",\r\n                      marginRight: \"10px\",\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"success\"\r\n                    onClick={handleOkButtonClick}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {showSuccess && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={<SuccessTick HeadText=\"Successfully Updated\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showSuccessinactive && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={<SuccessTick HeadText=\"Successfully\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {isRescheduleOpen && (\r\n        <InterviewReschedule\r\n          interviewId={currentInterviewId}\r\n          onSuccess={() => {\r\n            handleReset();\r\n            closeRescheduleModal();\r\n          }}\r\n          onClose={closeRescheduleModal}\r\n          // showModal={true}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["ScheduleInterviewFilter","interviewFilter","useSelector","state","interviewListDetails","interviewFilterRedDot","refreshRedDot","isSuperAdmin","adminDetails","roleID","adminIDTwo","localStorage","getItem","initialValues","adminId","jobId","contactNumber","candidateMobileNumber","companyName","jobCategory","city","area","interviewStatus","scheduledBy","filterDetails","create","createdTime","ended","endDate","interviewDate","interviewEndDate","formData","setFormData","useState","showFilter","setShowFilter","dateRange","setDateRange","start","end","dateFilterType","dateRange1","setDateRange1","showCustom","setshowCustom","showCustom1","setshowCustom1","validationErrors","setValidationErrors","setAdminDetails","id","adminName","showRedDot","setShowRedDot","Dispatch","useDispatch","errors","setErrors","options","setOptions","useEffect","console","log","size","adminList","setAdminList","page","handleFieldChange","field","value","numbersOnlyTest","prev","length","dateFormate","$d","trim","getJobFilterOptions","then","data","cityOptions","filter","element","category","areaOptions","JobCategoryOptions","GetAllsdminDetails","activeAdmins","item","Deactived","catch","alert","map","userName","adminid","anchorEl","setAnchorEl","React","open","Boolean","handleDateSelect","val","selectedOption","today","Date","daysToLastMonday","getDay","lastMonday","setDate","getDate","startDate","toISOString","split","getFullYear","getMonth","yesterday","setHours","handleCustomDate","type","target","handleInterviewCustomDate","handleApply","e","preventDefault","isFormValid","isValid","updateArea","event","updateCity","updateJobCategory","InterviewStatus","label","option","_jsxs","children","_jsx","className","concat","interviewStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","zIndex","childComponent","BoxContainerWidth","_Fragment","interviewListActions","setInterviewFilter","cursor","fontSize","AiOutlineClose","onSubmit","isFilterApplied","setInterviewFilterRedDot","handleSubmit","Stack","TextField","fullWidth","onChange","InputProps","startAdornment","display","alignItems","AiOutlinePhone","marginRight","FormControl","handleTextFieldClick","minWidth","htmlFor","name","Autocomplete","getOptionLabel","reason","filterSelectedOptions","renderInput","params","placeholder","undefined","currentTarget","Menu","onClose","MenuListProps","MenuItem","min","max","select","handleAssignToChange","defaultValue","el","handleClear","search","sx","_ref","interviewId","onSuccess","rescheduleDetails","setRescheduleDetails","reScheduledOn","notes","showSuccess","setShowSuccess","showCandidateId","validateForm","newErrors","Object","keys","PostRescheduleInterviews","setTimeout","error","helperText","required","inputProps","maxLength","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","minDate","dayjs","slotProps","textField","date","marginTop","multiline","maxRows","Button","color","SuccessTick","HeadText","elementRef","useRef","interviewDetails","setInterviewDetails","GetInterviewDetails","res","candidateName","candidate","firstName","job","position","contactPersonName","interviewScheduledDt","interview","styles","ref","alt","src","passBackgroundCard","loading","avatarProfilePic","taizoinLogoWatermarkIcon","DMMMYYYY_formate","dateValue","async","imageData","html2canvas","current","toDataURL","link","document","createElement","href","download","click","StyledTableCell","styled","TableCell","tableCellClasses","head","maxWidth","padding","body","RecentActivity","rescheduledDateTime","joinedOn","selectedOn","notSelectedOn","offerRejectedOn","notAttendedOn","attendedOn","leftTheCompanyAt","awaitingOn","willJoiningOn","replace","mostRecentDate","mostRecentKey","key","dateStr","includes","currentDate","Selected","Notselected","NotAttended","rejected_label","joined","rescheduledChips","Attended","leftCompany","willJoining","Awaitingchips","CandidateInterviewTable","_ref2","isSmallScreen","isWidthDown","isRescheduleOpen","setIsRescheduleOpen","showLoader","setShowLoader","CandidateInterviewList","setCandidateInterviewList","isChecked","setIsChecked","showConfirmPopup","setShowConfirmPopup","totalCount","setTotalCount","currentInterviewId","setCurrentInterviewId","interviewCard","setInterviewCard","show","candidatename","setcandidate","setContactPersonName","contactID","setcontactID","modalOpen","setModalOpen","showSuccessinactive","setshowSuccessinactive","pageCount","setPageCount","totalPages","currentPage","setOpen","isNotesEmpty","setIsNotesEmpty","isDateSelected","setIsDateSelected","setInterviewStatus","caninterviewid","statusfield","inputRef","attended","notAttended","selected","notSelected","offerRejected","rescheduled","isAwaiting","handleCloseNotes","handleReset","interviewCurrentStatus","GetcanInterviews","InterviewList","canInterviewList","Math","ceil","finally","handleRadioBtn","candidateId","statusFieldName","selectedCandidate","find","CanInterviewsModel","CandidateModel","handlePopupDetails","commonPopupActions","setShowPopup","copyToClipboard","text","innerText","appendChild","execCommand","removeChild","setInterviewFilterShceduleBy","closeRescheduleModal","setAdminName","setAdminId","adminNames","adminIds","FilterHead","setInterviewFilterSize","candidateSize","canLeadStyle","filterAdduser","LuRefreshCcw","Backdrop","theme","drawer","CircularProgress","Container","responsive","TableContainer","Table","stickyHeader","TableDetails","TableHead","TableRow","align","TableBody","i","_candidate$CandidateM","_candidate$CandidateM2","border","title","getcandidateDetails","getCandidateLead","handleCandidateDetails","textTruncate","capitalizeWords","lastName","mobileNumber","String","slice","JobModel","EmployerModel","indexOf","rescheduledDate","Popper","chips_wrp","Attended_wrp","checked","Tooltip","NotAttended_wrp","Selected_wrp","willJoining_wrp","awaiting_wrp","awaiting","NotSelected_wrp","OfferRejected_wrp","Joined_wrp","LeftCompany_wrp","leftTheCompany","background","outline","right","BsThreeDotsVertical","textAlign","select_wrp","GoDotFill","refName","handleButtonClick","Nojoid","spacing","Pagination","count","shape","setInterviewFilterPage","Box","component","m","noValidate","autoComplete","datefeild","FormHelperText","PutInterviewStatus","overflowY","CandidateInterviewCard","justifyContent","borderColor","PostinterviewInactive","InterviewReschedule"],"sourceRoot":""}